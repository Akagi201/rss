<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="https://nitter.freedit.eu/letsgetonchain/rss" rel="self" type="application/rss+xml" />
    <title>Let&apos;s get onchain / @letsgetonchain</title>
    <link>https://nitter.freedit.eu/letsgetonchain</link>
    <description>Twitter feed for: @letsgetonchain. Generated by nitter.freedit.eu
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    <image>
      <title>Let&apos;s get onchain / @letsgetonchain</title>
      <link>https://nitter.freedit.eu/letsgetonchain</link>
      <url>https://nitter.freedit.eu/pic/pbs.twimg.com%2Fprofile_images%2F1844052143621152771%2FStw0cBJB_400x400.jpg</url>
      <width>128</width>
      <height>128</height>
    </image>
      <item>
        <title>Been a solidity dev for the last three years and thus aware of the 24 kb limit for runtime contract size.

Didn&apos;t know that there was a limit on the init code as well of two times that, 48kb.

You only get a full picture of the evm by going through its implementation line by line</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Been a solidity dev for the last three years and thus aware of the 24 kb limit for runtime contract size.<br>
<br>
Didn't know that there was a limit on the init code as well of two times that, 48kb.<br>
<br>
You only get a full picture of the evm by going through its implementation line by line</p>
<img src="https://nitter.freedit.eu/pic/media%2FGgSGfi7WkAAEBvh.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Thu, 02 Jan 2025 10:57:04 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1874771887370453314#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1874771887370453314#m</link>
      </item>
      <item>
        <title>Revm feels like going through Ethereum&apos;s history..

For example it&apos;s support for older transaction types lets you trace the evolution of fork-specific validations‚¨áÔ∏è

Way more effective and sticky than reading EIPs.

Obviously implementing them is even better..

2025 goal ü´°</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Revm feels like going through Ethereum's history..<br>
<br>
For example it's support for older transaction types lets you trace the evolution of fork-specific validations‚¨áÔ∏è<br>
<br>
Way more effective and sticky than reading EIPs.<br>
<br>
Obviously implementing them is even better..<br>
<br>
2025 goal ü´°</p>
<img src="https://nitter.freedit.eu/pic/media%2FGgNhUstWkAAA0hE.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 01 Jan 2025 13:38:00 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1874450001792848050#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1874450001792848050#m</link>
      </item>
      <item>
        <title>If nodes execute smart contracts as machine code doesn&apos;t this increase the risk of consensus bugs due to nodes running on different hardware? 

I thought evm interpreter based execution was necessary to abstract from underlying platform</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>If nodes execute smart contracts as machine code doesn't this increase the risk of consensus bugs due to nodes running on different hardware? <br>
<br>
I thought evm interpreter based execution was necessary to abstract from underlying platform</p>
<p><a href="https://nitter.freedit.eu/gakonst/status/1804143468983521453#m">nitter.freedit.eu/gakonst/status/1804143468983521453#m</a></p>]]></description>
        <pubDate>Fri, 27 Dec 2024 18:48:06 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1872716099974042016#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1872716099974042016#m</link>
      </item>
      <item>
        <title>Are there any analytics about realized losses incurred by solvers in intent based protocols due to finality risks?</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Are there any analytics about realized losses incurred by solvers in intent based protocols due to finality risks?</p>]]></description>
        <pubDate>Tue, 17 Dec 2024 12:08:42 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1868991711898378361#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1868991711898378361#m</link>
      </item>
      <item>
        <title>RT by @letsgetonchain: Got two of those merged this week ü´° 

Your turn anon !</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Got two of those merged this week ü´° <br>
<br>
Your turn anon !</p>
<p><a href="https://nitter.freedit.eu/letsgetonchain/status/1866125652212043990#m">nitter.freedit.eu/letsgetonchain/status/1866125652212043990#m</a></p>
<img src="https://nitter.freedit.eu/pic/media%2FGe01Tc-XYAALeyt.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Sun, 15 Dec 2024 08:14:51 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1868208081924231408#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1868208081924231408#m</link>
      </item>
      <item>
        <title>RT by @letsgetonchain: Excellent guide on the logic part of Revm (Handlers) and sneak peek on example of using erc20 to pay for gas.</title>
        <dc:creator>@rakitadragan</dc:creator>
        <description><![CDATA[<p>Excellent guide on the logic part of Revm (Handlers) and sneak peek on example of using erc20 to pay for gas.</p>
<p><a href="https://nitter.freedit.eu/TheFiatBubble/status/1867092471131541971#m">nitter.freedit.eu/TheFiatBubble/status/1867092471131541971#m</a></p>]]></description>
        <pubDate>Thu, 12 Dec 2024 11:04:28 GMT</pubDate>
        <guid>https://nitter.freedit.eu/rakitadragan/status/1867163606908895618#m</guid>
        <link>https://nitter.freedit.eu/rakitadragan/status/1867163606908895618#m</link>
      </item>
      <item>
        <title>RT by @letsgetonchain: Big changes have landed in revm, transforming it into a full-blown EVM framework. 

Customising your evm is now much easier and more straightforward then every before.

Let&apos;s dive in what changed üßµ</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Big changes have landed in revm, transforming it into a full-blown EVM framework. <br>
<br>
Customising your evm is now much easier and more straightforward then every before.<br>
<br>
Let's dive in what changed üßµ</p>]]></description>
        <pubDate>Mon, 09 Dec 2024 14:19:55 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125627067429102#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125627067429102#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: Btw still working on the full code walkthrough of revm. 

Been waiting for this major change to be merged ü´°</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Btw still working on the full code walkthrough of revm. <br>
<br>
Been waiting for this major change to be merged ü´°</p>]]></description>
        <pubDate>Mon, 09 Dec 2024 16:55:51 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866164868706959657#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866164868706959657#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 6/ Want to Contribute?

There are plenty of ‚Äúfirst issues‚Äù open - perfect to get started. 

Dive in and pick one!

https://github.com/bluealloy/revm/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>6/ Want to Contribute?<br>
<br>
There are plenty of ‚Äúfirst issues‚Äù open - perfect to get started. <br>
<br>
Dive in and pick one!<br>
<br>
<a href="https://github.com/bluealloy/revm/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22">github.com/bluealloy/revm/is‚Ä¶</a></p>]]></description>
        <pubDate>Mon, 09 Dec 2024 14:20:01 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125652212043990#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125652212043990#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 5/ Revm as a Framework

With these changes, revm is no longer just an implementation; it‚Äôs a framework ready for:

- Seamless EIP experiments
- Shipping custom evms with out of the box support for an ecosystem of downstream tooling such as foundry</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>5/ Revm as a Framework<br>
<br>
With these changes, revm is no longer just an implementation; it‚Äôs a framework ready for:<br>
<br>
- Seamless EIP experiments<br>
- Shipping custom evms with out of the box support for an ecosystem of downstream tooling such as foundry</p>]]></description>
        <pubDate>Mon, 09 Dec 2024 14:20:00 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125649632739348#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125649632739348#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 4/ The Handler

The Handler is like the brain of the EVM, defining behaviour for:

- Validation
- Pre-execution checks
- Execution
- Post-execution cleanup

Previously, these behaviours were implemented as arced functions - fixed, stateless closures wrapped in Arc. This setup made it difficult to manage state or replace logic dynamically.

Now, the Handler is a set of traits, each focused on a specific stage of execution. This makes them modular, stateful, and easy to swap or customise.</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>4/ The Handler<br>
<br>
The Handler is like the brain of the EVM, defining behaviour for:<br>
<br>
- Validation<br>
- Pre-execution checks<br>
- Execution<br>
- Post-execution cleanup<br>
<br>
Previously, these behaviours were implemented as arced functions - fixed, stateless closures wrapped in Arc. This setup made it difficult to manage state or replace logic dynamically.<br>
<br>
Now, the Handler is a set of traits, each focused on a specific stage of execution. This makes them modular, stateful, and easy to swap or customise.</p>
<img src="https://nitter.freedit.eu/pic/media%2FGeXOKMKW0AAGw0Z.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Mon, 09 Dec 2024 14:19:59 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125645035471030#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125645035471030#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 3/ The context

The Context holds the execution environment‚Äîblock details, transaction info, config parameters, and the database state.

Previously, the EVM relied on the EvmWiring trait for injecting chain-specific logic. This approach was rigid and hard to customize.

Now, the Context is fully generic. You can easily plug in different block, transaction, configuration, and chain types without needing to implement the full wiring trait that tightly coupled to everything else.</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>3/ The context<br>
<br>
The Context holds the execution environment‚Äîblock details, transaction info, config parameters, and the database state.<br>
<br>
Previously, the EVM relied on the EvmWiring trait for injecting chain-specific logic. This approach was rigid and hard to customize.<br>
<br>
Now, the Context is fully generic. You can easily plug in different block, transaction, configuration, and chain types without needing to implement the full wiring trait that tightly coupled to everything else.</p>
<img src="https://nitter.freedit.eu/pic/media%2FGeXNiBZWQAAAPze.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Mon, 09 Dec 2024 14:19:58 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125639821951320#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125639821951320#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 2/
Enter the Game-Changing PR by @rakitadragan (https://github.com/bluealloy/revm/pull/1865)

This pull request simplifies everything. Let‚Äôs break down the main changes and their benefits.

At the heart of revm is the EVM struct, which  has two core members: the Context and the Handler.</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>2/<br>
Enter the Game-Changing PR by <a href="https://nitter.freedit.eu/rakitadragan" title="Dragan Rakita">@rakitadragan</a> (<a href="https://github.com/bluealloy/revm/pull/1865">github.com/bluealloy/revm/pu‚Ä¶</a>)<br>
<br>
This pull request simplifies everything. Let‚Äôs break down the main changes and their benefits.<br>
<br>
At the heart of revm is the EVM struct, which  has two core members: the Context and the Handler.</p>
<img src="https://nitter.freedit.eu/pic/media%2FGeXM9SuWMAA33gB.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Mon, 09 Dec 2024 14:19:56 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125634562375939#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125634562375939#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 1/ Some common issues and needs:

- EIP Inclusion &amp; Testing
Revm had to decide which EIPs to support upfront, even if they might never be finalized. Merging all proposals created a maintenance burden. Who would remove them if they never shipped?

- Playing with experimental features
Trying out new ideas and testing them required juggling with feature flags

- Chain support
Different chains have unique transaction formats, rules, etc. Supporting them often meant forking revm, leading to merge conflicts and high maintenance costs.</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>1/ Some common issues and needs:<br>
<br>
- EIP Inclusion & Testing<br>
Revm had to decide which EIPs to support upfront, even if they might never be finalized. Merging all proposals created a maintenance burden. Who would remove them if they never shipped?<br>
<br>
- Playing with experimental features<br>
Trying out new ideas and testing them required juggling with feature flags<br>
<br>
- Chain support<br>
Different chains have unique transaction formats, rules, etc. Supporting them often meant forking revm, leading to merge conflicts and high maintenance costs.</p>]]></description>
        <pubDate>Mon, 09 Dec 2024 14:19:55 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1866125630229884943#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1866125630229884943#m</link>
      </item>
      <item>
        <title>Ethereum is the most trusted execution environment in the world.</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Ethereum is the most trusted execution environment in the world.</p>]]></description>
        <pubDate>Sat, 07 Dec 2024 16:57:11 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1865440428754919854#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1865440428754919854#m</link>
      </item>
      <item>
        <title>RT by @letsgetonchain: Let&apos;s leverage REVM (EVM in Rust) to spot out cross-chain arbitrage opportunities! üïµÔ∏è‚Äç‚ôÇÔ∏èüí∞

Since everyone is hyped about $INST üìà, let&apos;s explore if we can make a profit by buying $INST on Ethereum and selling it on Polygon.

üíª Code snippets included! üßµüëá</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>Let's leverage REVM (EVM in Rust) to spot out cross-chain arbitrage opportunities! üïµÔ∏è‚Äç‚ôÇÔ∏èüí∞<br>
<br>
Since everyone is hyped about <a href="https://nitter.freedit.eu/search?q=%23INST">$INST</a> üìà, let's explore if we can make a profit by buying <a href="https://nitter.freedit.eu/search?q=%23INST">$INST</a> on Ethereum and selling it on Polygon.<br>
<br>
üíª Code snippets included! üßµüëá</p>]]></description>
        <pubDate>Tue, 03 Dec 2024 10:10:35 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1863888553052139686#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1863888553052139686#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 8/ ‚ö†Ô∏è Keep in mind:

Cross-chain arbitrage isn&apos;t atomic, so there&apos;s risk.
You need to hold capital and exposure to tokens on both chains. 

If you&apos;re interested in  the full codebase, DM me or join my discord here https://discord.gg/AjQbkaPpdd</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>8/ ‚ö†Ô∏è Keep in mind:<br>
<br>
Cross-chain arbitrage isn't atomic, so there's risk.<br>
You need to hold capital and exposure to tokens on both chains. <br>
<br>
If you're interested in  the full codebase, DM me or join my discord here <a href="https://discord.gg/AjQbkaPpdd">discord.gg/AjQbkaPpdd</a></p>]]></description>
        <pubDate>Tue, 03 Dec 2024 10:10:39 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1863888571054088495#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1863888571054088495#m</link>
      </item>
      <item>
        <title>R to @letsgetonchain: 7/

Finding profitable arbitrage opportunities is extremely tough and probably not worse your time but if you want to try for fun you need to simulate across tons of pools, tokens, and volumes.

The good news: REVM + CacheDB lets you do this super efficiently.

The bad news: Everyone is competing for these crumbs. ü•≤</title>
        <dc:creator>@letsgetonchain</dc:creator>
        <description><![CDATA[<p>7/<br>
<br>
Finding profitable arbitrage opportunities is extremely tough and probably not worse your time but if you want to try for fun you need to simulate across tons of pools, tokens, and volumes.<br>
<br>
The good news: REVM + CacheDB lets you do this super efficiently.<br>
<br>
The bad news: Everyone is competing for these crumbs. ü•≤</p>]]></description>
        <pubDate>Tue, 03 Dec 2024 10:10:38 GMT</pubDate>
        <guid>https://nitter.freedit.eu/letsgetonchain/status/1863888569254736258#m</guid>
        <link>https://nitter.freedit.eu/letsgetonchain/status/1863888569254736258#m</link>
      </item>

  </channel>
</rss>
