<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="https://nitter.freedit.eu/paramonoww/rss" rel="self" type="application/rss+xml" />
    <title>Pavel Paramonov / @paramonoww</title>
    <link>https://nitter.freedit.eu/paramonoww</link>
    <description>Twitter feed for: @paramonoww. Generated by nitter.freedit.eu
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    <image>
      <title>Pavel Paramonov / @paramonoww</title>
      <link>https://nitter.freedit.eu/paramonoww</link>
      <url>https://nitter.freedit.eu/pic/pbs.twimg.com%2Fprofile_images%2F1893025940558823424%2FCqEGEgrf_400x400.jpg</url>
      <width>128</width>
      <height>128</height>
    </image>
      <item>
        <title>I may look stupid here, but what’s the reason for building other interoperability solutions if we have a single standard?

Even if infra protocol can combine its own solution with ERC-7683, doesn’t it just create another interop option and further fragment the field?</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>I may look stupid here, but what’s the reason for building other interoperability solutions if we have a single standard?<br>
<br>
Even if infra protocol can combine its own solution with ERC-7683, doesn’t it just create another interop option and further fragment the field?</p>
<p><a href="https://nitter.freedit.eu/Uniswap/status/1897339829547135216#m">nitter.freedit.eu/Uniswap/status/1897339829547135216#m</a></p>]]></description>
        <pubDate>Thu, 06 Mar 2025 11:50:05 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1897615667286905341#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1897615667286905341#m</link>
      </item>
      <item>
        <title>it took celo 8 months to choose what stack to build on and 10 more months to build an op stack rollup

• july, 2023: celo proposed shifting from L1 to L2
• may, 2024: celo announced using OP stack
• march, 2025: celo announced their mainnet

does it really take that much time?</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>it took celo 8 months to choose what stack to build on and 10 more months to build an op stack rollup<br>
<br>
• july, 2023: celo proposed shifting from L1 to L2<br>
• may, 2024: celo announced using OP stack<br>
• march, 2025: celo announced their mainnet<br>
<br>
does it really take that much time?</p>
<p><a href="https://nitter.freedit.eu/Celo/status/1896617306509500661#m">nitter.freedit.eu/Celo/status/1896617306509500661#m</a></p>]]></description>
        <pubDate>Tue, 04 Mar 2025 04:31:18 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1896780465216143645#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1896780465216143645#m</link>
      </item>
      <item>
        <title>I spent two weeks in China and was surpised in both positive and negative ways.

Cons that I have found:

1. There is no personal space.
Everyone rushes forward, pushing their way through. Countless times, people bumped into my shoulder, and no one even looked back or apologized — they just ignored it. 

In every country I’ve visited before, people always apologize, and I do the same, even if I wasn’t the one at fault in the incident.

2. Many bikes ride on the sidewalk instead of the road.
Moreover, they honk at people walking on the sidewalk who are peacefully walking their way. I&apos;m not talking about bicycles, but real bikes who can go like 60 mph.

3. People don’t follow traffic rules. 
Even when there’s a red light, crowds cross the road despite oncoming cars. Meanwhile, drivers just smoke cigarettes and throw them out the window onto the street.

4. I noticed a lack of service.
Even in 5-star hotel restaurants, waiters don’t seem to know that you need a dessert fork for cheesecake. Whenever they cleared dirty plates with cutlery, they never brought replacement cutlery. What am I supposed to eat my next meal with?

5. Unnecessary questions for security?
When I applied for a Chinese visa, there was a field requiring me to list the countries I had visited in the last two years. I’ve been to many countries, including Turkey.

The visa was supposed to arrive in four days after submission, but five days later, they requested details about my time in Turkey: when I was there, how long I stayed, the purpose of my visit, and they even asked me to send hotel bookings. 

Why are they so suspicious of Turkey? They ended up issuing visa 1 week after the promised time, so I had to cancel and reschedule everything.

I’m not mentioning that no one speaks English because they don’t have to — China is for the Chinese. Also, the firewall blocks every Western website, but that’s easily fixed with a VPN.

Pros that I have found:

1. The food is exceptional.
There are many cozy cafés and restaurants, and everything is truly delicious. Chinese cuisine is incredibly diverse depending on region.

2. Delivery is probably the fastest in the world. 
There were many times when I ordered food and it arrived within 20–25 minutes — everything arrives hot and is packaged really well.

3. There are plenty of parks and natural areas.
Sometimes it feels like you’re in a forest: the air is extremely clean, and it’s refreshing to breathe, especially if you’ve lived in Southeast Asia long enough, you know what I mean.

4. Payments are incredibly convenient. 
You just show a QR code that’s accepted literally everywhere — from hotels to street food vendors. The Alipay system is flawless, and the whole world needs something like it.

5. Everything is remarkably cheap.
Taxis, food, hotels, transportation — literally everything. Moreover, it’s not cheap because it’s low quality, the quality is usually excellent.

6. The streets are very clean.
As I mentioned earlier, I’ve seen people throw trash on the streets countless times, but workers clean them constantly, so it never gets dirty. I bet if people didn’t litter, it would be even cleaner.

I would definitely return in the future, but next time I’d like to explore more nature rather than cities (this trip was to Guangzhou and Shenzhen). 

China seems to be developing rapidly — Shenzhen was basically a village 40 years ago, and now it’s a top3 Chinese city. 

I feel like people’s mindsets don’t evolve as quickly, so they’re adapting to new things they never had before. Most of the time, people are friendly and quite shy too.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>I spent two weeks in China and was surpised in both positive and negative ways.<br>
<br>
Cons that I have found:<br>
<br>
1. There is no personal space.<br>
Everyone rushes forward, pushing their way through. Countless times, people bumped into my shoulder, and no one even looked back or apologized — they just ignored it. <br>
<br>
In every country I’ve visited before, people always apologize, and I do the same, even if I wasn’t the one at fault in the incident.<br>
<br>
2. Many bikes ride on the sidewalk instead of the road.<br>
Moreover, they honk at people walking on the sidewalk who are peacefully walking their way. I'm not talking about bicycles, but real bikes who can go like 60 mph.<br>
<br>
3. People don’t follow traffic rules. <br>
Even when there’s a red light, crowds cross the road despite oncoming cars. Meanwhile, drivers just smoke cigarettes and throw them out the window onto the street.<br>
<br>
4. I noticed a lack of service.<br>
Even in 5-star hotel restaurants, waiters don’t seem to know that you need a dessert fork for cheesecake. Whenever they cleared dirty plates with cutlery, they never brought replacement cutlery. What am I supposed to eat my next meal with?<br>
<br>
5. Unnecessary questions for security?<br>
When I applied for a Chinese visa, there was a field requiring me to list the countries I had visited in the last two years. I’ve been to many countries, including Turkey.<br>
<br>
The visa was supposed to arrive in four days after submission, but five days later, they requested details about my time in Turkey: when I was there, how long I stayed, the purpose of my visit, and they even asked me to send hotel bookings. <br>
<br>
Why are they so suspicious of Turkey? They ended up issuing visa 1 week after the promised time, so I had to cancel and reschedule everything.<br>
<br>
I’m not mentioning that no one speaks English because they don’t have to — China is for the Chinese. Also, the firewall blocks every Western website, but that’s easily fixed with a VPN.<br>
<br>
Pros that I have found:<br>
<br>
1. The food is exceptional.<br>
There are many cozy cafés and restaurants, and everything is truly delicious. Chinese cuisine is incredibly diverse depending on region.<br>
<br>
2. Delivery is probably the fastest in the world. <br>
There were many times when I ordered food and it arrived within 20–25 minutes — everything arrives hot and is packaged really well.<br>
<br>
3. There are plenty of parks and natural areas.<br>
Sometimes it feels like you’re in a forest: the air is extremely clean, and it’s refreshing to breathe, especially if you’ve lived in Southeast Asia long enough, you know what I mean.<br>
<br>
4. Payments are incredibly convenient. <br>
You just show a QR code that’s accepted literally everywhere — from hotels to street food vendors. The Alipay system is flawless, and the whole world needs something like it.<br>
<br>
5. Everything is remarkably cheap.<br>
Taxis, food, hotels, transportation — literally everything. Moreover, it’s not cheap because it’s low quality, the quality is usually excellent.<br>
<br>
6. The streets are very clean.<br>
As I mentioned earlier, I’ve seen people throw trash on the streets countless times, but workers clean them constantly, so it never gets dirty. I bet if people didn’t litter, it would be even cleaner.<br>
<br>
I would definitely return in the future, but next time I’d like to explore more nature rather than cities (this trip was to Guangzhou and Shenzhen). <br>
<br>
China seems to be developing rapidly — Shenzhen was basically a village 40 years ago, and now it’s a top3 Chinese city. <br>
<br>
I feel like people’s mindsets don’t evolve as quickly, so they’re adapting to new things they never had before. Most of the time, people are friendly and quite shy too.</p>
<img src="https://nitter.freedit.eu/pic/media%2FGlA2MJUXoAAuukV.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Sun, 02 Mar 2025 05:48:40 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1896075160899502561#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1896075160899502561#m</link>
      </item>
      <item>
        <title>Does it make sense to use SVM on other blockchains?

Rollup ecosystems are expanding as the usage of various altVMs grows; meanwhile, with Solana and SVM already popular, I found myself wondering: 

Can SVM extend beyond Solana itself? If so, what are the reasons for doing so?

1. Are rollups and network extensions the same?

Solana coined the term &quot;Network Extensions&quot; (NEs), and many people from the Ethereum community started arguing that NEs are the same as rollups.

So, are Network Extensions the same as L2s? Well, there&apos;s no official definition, and people like making their own definitions, but here is what we have so far from @Austin_Federa, who used to be the Head of Strategy at Solana Foundation:

&quot;Network Extensions extend the Solana network to new places, or bring new execution environments, specialized processing, etc to the Solana network.&quot;

According to Austin&apos;s definitions, as well as not very objective discussions on CT, Network Extensions are primarily two things:

• Networks on Solana that extend the blockspace processing transactions for various reasons (similar to rollups on Ethereum).

• Networks that use the SVM for execution but settle on another blockchain (similar to rollups on Ethereum with an altVM).

This topic will be split into two different parts.

2. Why would someone want to use SVM elsewhere?

The main reason to use the SVM as an execution layer on other chains is obviously speed, as it is one of the fastest VMs, with its pros like parallel execution, local fee markets, cheaper transactions, and more use cases unlocked with such efficiency, etc.

So, in general, there are multiple reasons why you might want to use SVM as an execution engine on other chains:

• The existing L2 chains on the market don&apos;t really solve your problem, and you need SVM.

• You want to leverage Solana&apos;s ecosystem of dApps for easier implementation.

• You want to leverage the liquidity and mindshare of another ecosystem.

• You don&apos;t want to argue whether you&apos;re an Ethereum fan or a Solana fan and can just say &quot;I&apos;m both.&quot;

But at the same time, there can be other VMs that deliver significant performance to slower chains like Bitcoin and Ethereum. For example, MoveVM, which was designed to be a better Rust for blockchain, and one example of a player in that field is @movementlabsxyz.

However, we&apos;re in the blockchain industry, and everyone is somewhat a degen and understands the architecture at a certain level. In that case, the architecture design choices create communities of people that will use the chain.

Arguably, even if MoveVM has similar performance to SVM and might be even better for some cases, it doesn&apos;t have the same mindshare as SVM does (at least for now), as long as the history of SVM and Solana is richer and it attracts more people and builders in the space.

You can take an analogy here with Amazon and some new marketplace entering the market. Even if a new marketplace is cheaper, offers better service, and has better products, most people will still use Amazon because they are accustomed to it and have been using it for too long to switch to something else.

Summing up, yes, we need SVM on other blockchains for two particular reasons: 

• Leverage SVM&apos;s performance and its features, possibly bringing new use cases to the ecosystem

• Leverage the community and mindshare of Solana and SVM in particular, offering something similar (SVM) but on a slightly new stuff (settlement layer).

There are multiple players in the field, but I want to point out three of them: @EclipseFND, @yona_network, and @soon_svm.

3. Thesis: Bitcoin doesn&apos;t need DeFi and high speed.

Eclipse and Yona rollups are somewhat similar in terms of SVM usage; however, Eclipse settles on Ethereum, while Yona settles on Bitcoin. Both solutions aim to leverage the underlying liquidity of the chains, but their fundamental goals are slightly different, which I&apos;ll discuss a bit later.

Here is what the Yona Network architecture looks like, whose thesis is to be Bitcoin&apos;s fastest L2, using SVM for building a DeFi ecosystem:

Yona aims to bring high speed to Bitcoin as well as utilize idle Bitcoin assets in the DeFi ecosystem.

However, I think it&apos;s important to address several questions: does Bitcoin really need such high performance, and do we really need BTC to be involved in DeFi activities?

In my opinion, this all stems from history. If you&apos;ve ever dealt with an average Bitcoin maximalist, you know what I mean: the typical large BTC holder knows little about other chains and assets beyond the belief that they are &quot;worse&quot; than Bitcoin in some way.

This presents a significant challenge for any project trying to build on Bitcoin. The blockchain itself lacks much activity, and few solo BTC holders are interested in using their BTC for anything other than as a store of value.

In my view, Bitcoin and its L2s are highly unlikely to ever match the &apos;degen culture&apos; or the DeFi ecosystem of other platforms, suggesting that such speed might not be necessary for the DeFi ecosystem. 

What&apos;s more likely is that Bitcoin&apos;s L2s could become more focused on payment channels where speed might be crucial. However, this is more a cultural, legal, and product challenge rather than purely technological.

4. Thesis: Ethereum needs SVM, but it&apos;s complicated.

Eclipse is very similar to Yona in terms of goals and SVM usage; however, Eclipse uses SVM as its execution layer and settles on Ethereum. As you probably understand, being a rollup on Ethereum brings another set of pros and cons.

Ethereum differs from Bitcoin and definitely requires more speed due to its usage and vast DeFi ecosystem. If we set aside the fragmentation issues caused by each rollup&apos;s launch, there&apos;s another significant challenge: standing out.

The main slogan of Eclipse is &quot;Solana on Ethereum,&quot; and the entire team focuses on bringing the benefits of SVM to Ethereum, such as fee markets and parallel execution. 

However, there are other teams like @megaeth_labs working on solutions that could potentially be faster than Eclipse.

But will all users migrate to a new, faster solution? Of course not! (See the Amazon analogy above). The goal for a general-purpose rollup should be to build a vibrant ecosystem and differentiate through product positioning rather than just technical characteristics.

Bringing SVM doesn&apos;t solve all problems: you still need to focus extensively on ecosystem development, product, technology, business development, and all related aspects, which are the most challenging parts and don&apos;t necessarily relate to SVM. 

In the future, deploying a fast rollup might become as straightforward as swapping tokens (not using MetaMask&apos;s UX, of course).

Currently, 90% of Eclipse&apos;s chain activity comes from their tap game, where one transaction equals one tap, averaging 3000 TPS. However, claiming high on-chain activity when 90% of the transactions are merely screen taps is highly questionable. 

This only reinforces the point that speed isn&apos;t the issue; the real challenge is finding an approach to ensure genuine activity within the ecosystem post-TGE and avoid the same pitfalls as Scroll or Mode Network.

5. Thesis: SVM stack is cool, but stack is still a stack.

SOON (Soon) is essentially a hybrid solution that offers their main chain (SVM on Ethereum) and an SDK which allows you to deploy L2s with SVM as the execution layer on any chains (in the future, currently, it&apos;s Ethereum only).

The funny thing is that Eclipse used to be almost exactly what SOON is today: a rollup provider with the ability to deploy SVM chains on any blockchain. 

But now, Eclipse is different, and it&apos;s interesting to consider the reasons. In my opinion, there could be two main ones:

1. Poor business model

2. Completely different views from people from Solana people who believe it&apos;s necessary to scale the base layer as much as possible before fragmenting mindshare, liquidity, etc.

As I mentioned before, Soon is SVM on Ethereum, and the core value proposition is clear, but do we need SVM L2s on other chains? 

The question can be simplified: &quot;do we need L2s on other chains?&quot;

I explained the reasoning regarding Ethereum and Bitcoin earlier, but do we need L2s on Aptos, Sui, Avalanche, NEAR? I&apos;m not hating on these ecosystems, but why would you need a rollup on chains that are far from reaching their TPS limits? (besides MEV extraction)

I think the SVM Stack would be really interesting for app-specific chains on Ethereum, Bitcoin, or even Cosmos, where you want to extract your own value without sharing much of it with the base layer. 

If we are believers in an app-chain future, as with @unichain, perhaps Aave launching their own chain, and the Cosmos thesis in general, the SVM stack is a great idea. 

Along with the InterSOON messaging infrastructure (which is actually @hyperlane), it could enhance interoperability and composability between these app-chains.

I don&apos;t see a future where rollup SDKs are mostly used to create general-purpose L2s, so the infrastructure to unify SVM app-chains across different blockchains might be necessary. 

However, there are two concerns: how challenging it will be to implement this, and aren&apos;t we just creating localized interoperability within another stack?

----
The second part of this article will be released soon and will focus on answering a single question: &quot;Does it make sense to have Network Extensions on Solana itself?&quot;</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>Does it make sense to use SVM on other blockchains?<br>
<br>
Rollup ecosystems are expanding as the usage of various altVMs grows; meanwhile, with Solana and SVM already popular, I found myself wondering: <br>
<br>
Can SVM extend beyond Solana itself? If so, what are the reasons for doing so?<br>
<br>
1. Are rollups and network extensions the same?<br>
<br>
Solana coined the term "Network Extensions" (NEs), and many people from the Ethereum community started arguing that NEs are the same as rollups.<br>
<br>
So, are Network Extensions the same as L2s? Well, there's no official definition, and people like making their own definitions, but here is what we have so far from <a href="https://nitter.freedit.eu/Austin_Federa" title="Austin Federa | IBRL | 🇺🇸">@Austin_Federa</a>, who used to be the Head of Strategy at Solana Foundation:<br>
<br>
"Network Extensions extend the Solana network to new places, or bring new execution environments, specialized processing, etc to the Solana network."<br>
<br>
According to Austin's definitions, as well as not very objective discussions on CT, Network Extensions are primarily two things:<br>
<br>
• Networks on Solana that extend the blockspace processing transactions for various reasons (similar to rollups on Ethereum).<br>
<br>
• Networks that use the SVM for execution but settle on another blockchain (similar to rollups on Ethereum with an altVM).<br>
<br>
This topic will be split into two different parts.<br>
<br>
2. Why would someone want to use SVM elsewhere?<br>
<br>
The main reason to use the SVM as an execution layer on other chains is obviously speed, as it is one of the fastest VMs, with its pros like parallel execution, local fee markets, cheaper transactions, and more use cases unlocked with such efficiency, etc.<br>
<br>
So, in general, there are multiple reasons why you might want to use SVM as an execution engine on other chains:<br>
<br>
• The existing L2 chains on the market don't really solve your problem, and you need SVM.<br>
<br>
• You want to leverage Solana's ecosystem of dApps for easier implementation.<br>
<br>
• You want to leverage the liquidity and mindshare of another ecosystem.<br>
<br>
• You don't want to argue whether you're an Ethereum fan or a Solana fan and can just say "I'm both."<br>
<br>
But at the same time, there can be other VMs that deliver significant performance to slower chains like Bitcoin and Ethereum. For example, MoveVM, which was designed to be a better Rust for blockchain, and one example of a player in that field is <a href="https://nitter.freedit.eu/movementlabsxyz" title="Movement">@movementlabsxyz</a>.<br>
<br>
However, we're in the blockchain industry, and everyone is somewhat a degen and understands the architecture at a certain level. In that case, the architecture design choices create communities of people that will use the chain.<br>
<br>
Arguably, even if MoveVM has similar performance to SVM and might be even better for some cases, it doesn't have the same mindshare as SVM does (at least for now), as long as the history of SVM and Solana is richer and it attracts more people and builders in the space.<br>
<br>
You can take an analogy here with Amazon and some new marketplace entering the market. Even if a new marketplace is cheaper, offers better service, and has better products, most people will still use Amazon because they are accustomed to it and have been using it for too long to switch to something else.<br>
<br>
Summing up, yes, we need SVM on other blockchains for two particular reasons: <br>
<br>
• Leverage SVM's performance and its features, possibly bringing new use cases to the ecosystem<br>
<br>
• Leverage the community and mindshare of Solana and SVM in particular, offering something similar (SVM) but on a slightly new stuff (settlement layer).<br>
<br>
There are multiple players in the field, but I want to point out three of them: <a href="https://nitter.freedit.eu/EclipseFND" title="Eclipse (🐮,🌑)">@EclipseFND</a>, <a href="https://nitter.freedit.eu/yona_network" title="Yona Labs">@yona_network</a>, and <a href="https://nitter.freedit.eu/soon_svm" title="SOON - Solana Optimistic Network (Mainnet Arc)">@soon_svm</a>.<br>
<br>
3. Thesis: Bitcoin doesn't need DeFi and high speed.<br>
<br>
Eclipse and Yona rollups are somewhat similar in terms of SVM usage; however, Eclipse settles on Ethereum, while Yona settles on Bitcoin. Both solutions aim to leverage the underlying liquidity of the chains, but their fundamental goals are slightly different, which I'll discuss a bit later.<br>
<br>
Here is what the Yona Network architecture looks like, whose thesis is to be Bitcoin's fastest L2, using SVM for building a DeFi ecosystem:<br>
<br>
Yona aims to bring high speed to Bitcoin as well as utilize idle Bitcoin assets in the DeFi ecosystem.<br>
<br>
However, I think it's important to address several questions: does Bitcoin really need such high performance, and do we really need BTC to be involved in DeFi activities?<br>
<br>
In my opinion, this all stems from history. If you've ever dealt with an average Bitcoin maximalist, you know what I mean: the typical large BTC holder knows little about other chains and assets beyond the belief that they are "worse" than Bitcoin in some way.<br>
<br>
This presents a significant challenge for any project trying to build on Bitcoin. The blockchain itself lacks much activity, and few solo BTC holders are interested in using their BTC for anything other than as a store of value.<br>
<br>
In my view, Bitcoin and its L2s are highly unlikely to ever match the 'degen culture' or the DeFi ecosystem of other platforms, suggesting that such speed might not be necessary for the DeFi ecosystem. <br>
<br>
What's more likely is that Bitcoin's L2s could become more focused on payment channels where speed might be crucial. However, this is more a cultural, legal, and product challenge rather than purely technological.<br>
<br>
4. Thesis: Ethereum needs SVM, but it's complicated.<br>
<br>
Eclipse is very similar to Yona in terms of goals and SVM usage; however, Eclipse uses SVM as its execution layer and settles on Ethereum. As you probably understand, being a rollup on Ethereum brings another set of pros and cons.<br>
<br>
Ethereum differs from Bitcoin and definitely requires more speed due to its usage and vast DeFi ecosystem. If we set aside the fragmentation issues caused by each rollup's launch, there's another significant challenge: standing out.<br>
<br>
The main slogan of Eclipse is "Solana on Ethereum," and the entire team focuses on bringing the benefits of SVM to Ethereum, such as fee markets and parallel execution. <br>
<br>
However, there are other teams like <a href="https://nitter.freedit.eu/megaeth_labs" title="MegaETH">@megaeth_labs</a> working on solutions that could potentially be faster than Eclipse.<br>
<br>
But will all users migrate to a new, faster solution? Of course not! (See the Amazon analogy above). The goal for a general-purpose rollup should be to build a vibrant ecosystem and differentiate through product positioning rather than just technical characteristics.<br>
<br>
Bringing SVM doesn't solve all problems: you still need to focus extensively on ecosystem development, product, technology, business development, and all related aspects, which are the most challenging parts and don't necessarily relate to SVM. <br>
<br>
In the future, deploying a fast rollup might become as straightforward as swapping tokens (not using MetaMask's UX, of course).<br>
<br>
Currently, 90% of Eclipse's chain activity comes from their tap game, where one transaction equals one tap, averaging 3000 TPS. However, claiming high on-chain activity when 90% of the transactions are merely screen taps is highly questionable. <br>
<br>
This only reinforces the point that speed isn't the issue; the real challenge is finding an approach to ensure genuine activity within the ecosystem post-TGE and avoid the same pitfalls as Scroll or Mode Network.<br>
<br>
5. Thesis: SVM stack is cool, but stack is still a stack.<br>
<br>
SOON (Soon) is essentially a hybrid solution that offers their main chain (SVM on Ethereum) and an SDK which allows you to deploy L2s with SVM as the execution layer on any chains (in the future, currently, it's Ethereum only).<br>
<br>
The funny thing is that Eclipse used to be almost exactly what SOON is today: a rollup provider with the ability to deploy SVM chains on any blockchain. <br>
<br>
But now, Eclipse is different, and it's interesting to consider the reasons. In my opinion, there could be two main ones:<br>
<br>
1. Poor business model<br>
<br>
2. Completely different views from people from Solana people who believe it's necessary to scale the base layer as much as possible before fragmenting mindshare, liquidity, etc.<br>
<br>
As I mentioned before, Soon is SVM on Ethereum, and the core value proposition is clear, but do we need SVM L2s on other chains? <br>
<br>
The question can be simplified: "do we need L2s on other chains?"<br>
<br>
I explained the reasoning regarding Ethereum and Bitcoin earlier, but do we need L2s on Aptos, Sui, Avalanche, NEAR? I'm not hating on these ecosystems, but why would you need a rollup on chains that are far from reaching their TPS limits? (besides MEV extraction)<br>
<br>
I think the SVM Stack would be really interesting for app-specific chains on Ethereum, Bitcoin, or even Cosmos, where you want to extract your own value without sharing much of it with the base layer. <br>
<br>
If we are believers in an app-chain future, as with <a href="https://nitter.freedit.eu/unichain" title="Unichain">@unichain</a>, perhaps Aave launching their own chain, and the Cosmos thesis in general, the SVM stack is a great idea. <br>
<br>
Along with the InterSOON messaging infrastructure (which is actually <a href="https://nitter.freedit.eu/hyperlane" title="Hyperlane ⏩">@hyperlane</a>), it could enhance interoperability and composability between these app-chains.<br>
<br>
I don't see a future where rollup SDKs are mostly used to create general-purpose L2s, so the infrastructure to unify SVM app-chains across different blockchains might be necessary. <br>
<br>
However, there are two concerns: how challenging it will be to implement this, and aren't we just creating localized interoperability within another stack?<br>
<br>
----<br>
The second part of this article will be released soon and will focus on answering a single question: "Does it make sense to have Network Extensions on Solana itself?"</p>
<img src="https://nitter.freedit.eu/pic/media%2FGkI_m9yb0AA-Lsg.jpg" style="max-width:250px;" />
<img src="https://nitter.freedit.eu/pic/media%2FGkI_-tUbQAAihR8.jpg" style="max-width:250px;" />
<img src="https://nitter.freedit.eu/pic/media%2FGkJAmawbYAAJxrw.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 19 Feb 2025 10:37:33 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1892161592969801870#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1892161592969801870#m</link>
      </item>
      <item>
        <title>I was glad to research different AMM designs, mostly focusing on CLOB and intent-based models, and to help @threesigmaxyz write this lengthy article.

In this article:

• AMM limitations from the perspectives of LPs and users
• Design choices for hybrid CLOB-AMM DEXs
• The use of intents in current protocols
• New AMM designs, such as am-AMM, pm-AMM, sr-AMM, and more

As the website states, it takes 49 minutes to read it.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>I was glad to research different AMM designs, mostly focusing on CLOB and intent-based models, and to help <a href="https://nitter.freedit.eu/threesigmaxyz" title="Three Sigma">@threesigmaxyz</a> write this lengthy article.<br>
<br>
In this article:<br>
<br>
• AMM limitations from the perspectives of LPs and users<br>
• Design choices for hybrid CLOB-AMM DEXs<br>
• The use of intents in current protocols<br>
• New AMM designs, such as am-AMM, pm-AMM, sr-AMM, and more<br>
<br>
As the website states, it takes 49 minutes to read it.</p>
<p><a href="https://nitter.freedit.eu/threesigmaxyz/status/1891866104990982244#m">nitter.freedit.eu/threesigmaxyz/status/1891866104990982244#m</a></p>]]></description>
        <pubDate>Tue, 18 Feb 2025 16:29:15 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1891887715819586015#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1891887715819586015#m</link>
      </item>
      <item>
        <title>While everyone is in HK or preparing for Denver, I decided to go to China to visit Guangzhou and Shenzhen.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>While everyone is in HK or preparing for Denver, I decided to go to China to visit Guangzhou and Shenzhen.</p>
<img src="https://nitter.freedit.eu/pic/media%2FGj538MSakAA9inr.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Sun, 16 Feb 2025 11:02:48 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1891080784015999103#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1891080784015999103#m</link>
      </item>
      <item>
        <title>RT by @paramonoww: How can we make the use of web2 data in web3 actually private and verifiable?

Many people who claim that web3 is the new internet define it with the phrase &quot;read, write, own.&quot; The &quot;read&quot; and &quot;write&quot; parts are clear, but when it comes to &quot;own&quot; in terms of data, we hardly own anything today.

User data is often stolen by corporations and used in ways that benefit them; we don’t truly own anything on the internet. 

However, we can&apos;t just shift to a world where only web3 exists without sharing anything. No, we still need to share, but only what&apos;s necessary.

As someone with a weaker passport, I&apos;m stuck applying for e-visas and submitting endless details about myself to prove I&apos;m eligible for specific visas. And I always end up asking myself:

• Why should I share my entire bank statement when they only need to confirm a specific income level?

• Why should I provide the exact hotel reservation instead of just proving I&apos;ve booked a hotel in this country?

• Why do I have to submit my full passport details when all they need is to verify my permanent residence in my current country?

There are two main concerns here: services know far more than they need to, and the data you&apos;re providing isn&apos;t private. But how does this relate to security and privacy in crypto?

1. Web3 is not gonna make it without web2 data.

As most of you know, smart contracts essentially have no idea how much BTC, ETH, SOL, or any other asset costs. This task is delegated to oracles, which constantly post public data from the outside world to the smart contract.

In the Ethereum world, this role is almost monopolized by @chainlink with their oracle networks to ensure we don&apos;t rely on a single node. So, we really do need web2 data for more use cases beyond just knowing the price of certain assets.

However, this only applies to public data. What if I want to securely connect my bank account or Telegram account and share sensitive information that isn&apos;t publicly available but is private to me?

The first thought is: how can we bring this data onto a blockchain with proof that the private data is secure?

Unfortunately, it doesn’t work that way because servers don’t sign the responses they send, so you can’t reliably verify something like that in smart contracts.

The protocol that secures communication over a computer network is called TLS: Transport Layer Security. Even if you haven&apos;t heard of it, you use it daily. For example, while reading this article, you&apos;ll see the &quot;https://&quot; in your browser&apos;s address bar.

If you tried accessing the website with an &quot;http://&quot; connection (without the &quot;s&quot;), your browser would warn you that the connection isn&apos;t secure. The &quot;s&quot; in the link stands for TLS, which secures your connection, ensuring privacy and preventing anyone from stealing the data you&apos;re transmitting.

2. The connection is already secure, can&apos;t we just transport and use it in the web3?

As I mentioned before, we face a verifiability problem: servers don’t sign the responses they send, so we can&apos;t really verify the data.

Even if a data source agrees to share its data, the standard TLS protocol can&apos;t prove its authenticity to others. Simply passing a response isn’t enough: clients can easily alter the data locally, sharing those responses fully exposes them, risking user privacy.

One approach to the verifiability problem is an enhanced version of TLS called zkTLS.

The working mechanism of zkTLS is similar to TLS but slightly different, here&apos;s how it works:

• You visit a website through a secure TLS connection and send the required request.

• zkTLS generates a zk proof that verifies the data while revealing only the specific details the user wants to prove, keeping everything else private.

• The generated zk proof is then used by other apps to confirm and verify that the provided information is correct.

When I say zkTLS, I&apos;m referring to projects utilizing zkTLS, but there are different approaches to data verifiability using various solutions: 

1. TEE (Trusted Execution Environment)
2. MPC (Multi-Party Computation)
3. Proxy

Interestingly, each approach introduces its own set of unique use cases. So, how do they differ?

3. Why isn&apos;t there a single standard for zkTLS? How are they different?

zkTLS isn&apos;t a single technology because verifying private web data without exposing it can be approached from multiple angles, each with its own trade-offs. The core idea is to extend TLS with proofs, but how you generate and validate those proofs depends on the underlying mechanism.

As I mentioned before, three main approaches are using TEE-TLS, MPC-TLS, or Proxy-TLS.

TEE relies on specialized hardware, like Intel SGX or AWS Nitro Enclaves, to create a secure &quot;black box&quot; where data can be processed and proofs generated. The hardware ensures the data stays private and computations are tamper-proof.

In a TEE-based zkTLS setup, the TEE runs the protocol, proving the TLS session&apos;s execution and content. The verifier is the TEE itself, so trust depends on the TEE&apos;s manufacturer and its resistance to attacks. This approach is efficient with low computational and network overhead. 

However, it has a major flaw: you have to trust the hardware manufacturer, and vulnerabilities in TEEs (like side-channel attacks) can break the whole system.

Proxy-TLS and MPC-TLS are the most widely adopted approaches due to their broader range of use cases. Projects like @OpacityNetwork and @reclaimprotocol, that are built on @eigenlayer, leverage these models to ensure data security and privacy along with an additional layer of economic security.

Let&apos;s see how secure these solutions are, which use cases zkTLS protocols enable, and what&apos;s already live today.

4. What&apos;s so special about MPC-TLS and Opacity Network?

During the TLS Handshake (where a client and server agree on how to securely communicate by sharing encryption keys), the website&apos;s role remains unchanged, but the browser&apos;s process does something different.

Instead of generating its own secret key, it uses a network of nodes to create a multiparty secret key via MPC. This key performs the handshake for the browser, ensuring that no single entity knows the shared key.

Encryption and decryption require cooperation among all nodes and the browser, with each adding or removing their part of the encryption sequentially before data reaches or leaves the website. MPC-TLS provides strong security and can be distributed so no one group has all the power.

Opacity Network enhances the classic @tlsnotary framework by adding safeguards to minimize trust issues. It employs multiple security measures like:

1. On-chain verification of web2 account IDs
2. Commit scheme
3. Reveal scheme
4. Random MPC-network sampling
5. Verifiable log of attempts

Account IDs, being static in web2 systems, allow for proof by committee where ten different nodes must confirm ownership. This links the account to a unique wallet, preventing repeated tries with different wallets to find a colluding node. 

You can see how Opacity works in detail down below:

Opacity nodes operate within a TEE, making collusion almost impossible if the TEE is secure. Beyond TEEs, Opacity also uses Eigenlayer to leverage an AVS, requiring nodes to restake 32 stETH, with immediate slashing for misconduct, avoiding delays associated with cooldowns.

You can see that Opacity uses both MPC and TEE, but because MPC is used for zkTLS while TEE is used basically for node security, it&apos;s still called MPC-TLS.

However, if the TEEs were to fail, it could enable a node to engage in collusion within the MPC. That&apos;s one of the reasons why an additional economic security layer is needed to prevent this behavior.

That&apos;s also why Opacity is developing a whistleblower mechanism where users who can prove that a notary has acted improperly will be rewarded with a share of the penalty imposed on the notary&apos;s stake.

Due to its simplicity of integration, security, and the privacy it offers, Opacity has attracted various protocols to integrate it into their products across consumer, DeFi, and AI agent sectors.

The team from @earnos_io is developing a platform where brands can reward users for engagement or task completion. EarnOS uses Opacity’s tech to prove traits via popular apps without revealing personal info, letting brands target audiences while users keep privacy and earn rewards.

Opacity is also integrated into the @daylightenergy_ protocol, developing a decentralized electric utility network where users can earn rewards for contributing to clean energy solutions. Thanks to Opacity, users can prove energy device ownership on-chain without specialized hardware.

Opacity can even be integrated with AI agents, bringing more verifiability and transparency to a field that currently faces significant challenges. zkTLS was recently integrated into @elizaOS, allowing for verifiable AI interactions without privacy loss. 

However, TEE-TLS and MPC-TLS are only two variations of zkTLS, there&apos;s also a third one called Proxy-TLS, with the Reclaim Network being the most famous representation of this model. So, how is it different in terms of tech from the other two variations, and which use cases can be enabled by Proxy-TLS?

5. What’s so special about Proxy-TLS and Reclaim Protocol?

HTTPS proxies, common on the internet, forward encrypted traffic without accessing its content. In the zkTLS proxy model, it works almost the same with slight additions:

• The browser sends requests to the website through a proxy, which also handles the website&apos;s responses.

• The proxy sees all encrypted exchanges and attests to their authenticity, noting whether each is a request or response.

• The browser then generates a zk proof which states that it can encrypt this data with a shared key without revealing the key and shows the result.

• This works because it&apos;s nearly impossible to create a fake key that turns the data into anything sensible, so just showing you can decrypt it is enough.

Revealing the key would compromise all prior messages, including sensitive data like usernames and passwords. Proxy-TLS is pretty fast, affordable, and handles large data volumes well, making it ideal for high-throughput settings. 

The majority of servers don&apos;t restrict access based on varying IP addresses, making this method pretty widely applicable.

Reclaim Protocol uses Proxy-TLS for efficient data verification and employs proxies to bypass Web2 firewalls preventing large-scale proxy blocking. 

Here&apos;s how it works:

The main problem here is collusion: if the user and attestor collude, they can sign basically anything and act maliciously. To mitigate this, Reclaim incorporates a subset of validators chosen to introduce randomness and block such exploits.

Reclaim uses Eigen&apos;s AVS to decentralize the validation of the data. EigenLayer operators can act as attestors, but they will need to deploy their own AVS to specify the attestation logic for their service.

Reclaim is a platform enabling unique use cases like importing ride-sharing data for transportation apps, bridging off-chain data for blockchain economics, verifying identities with national ID data, creating custom data solutions via developer tools, and more.

The Reclaim ecosystem is home to 20+ projects, but I&apos;d like to highlight 4 of them in the money markets, digital identity, consumer, and hiring sectors.

@3janexyz is the first credit-based money market on Base, offering secured credit lines to crypto users by assessing their creditworthiness and future cash flows, using both on-chain and off-chain financial data.

3Jane uses Reclaim&apos;s proxy model to verify credit data from VantageScore, Cred, Coinbase, and Plaid, ensuring privacy of this data.

Another use for credit scores with zkTLS is through @zkme_&apos;s feature, zkCreditScore. It uses Reclaim Protocol to get your US credit score securely with zkTLS. This lets zkMe check a user&apos;s credit score and make unique soulbound tokens (SBTs) to store this data.

Can there be any other use cases besides credit scores? Of course, there are. 

We can take @zkp2p as an example, which is a consumer goods marketplace that leverages Reclaim for verifying users&apos; Ticketmaster data as well as verifying user payments. 

At the same time, @bondexapp, which is one of the most popular job boards in crypto, uses Reclaim for getting proof of work of profiles, verifying that the data is real, private, and verifiable.

Looking at the use cases possible via zkTLS, the ability to verify TLS transcripts on-chain is already unlocking numerous new functionalities, allowing users to control their own data without needing permission from large corporations. 

More importantly, zkTLS is made to ensure that your personal data is not used against you. So, where is this headed?

6. Is zkTLS here to stay?

There is still work to be done, but different zkTLS protocols are already introducing new use cases that redistribute power back to the users. 

@Tim_Roughgarden on the a16z crypto podcast highlighted that zk proofs, proposed in 1985, only gained popularity with blockchain applications, thanks to hundreds of developers working to reduce proof size and costs.

And now, contributions from the blockchain industry are finding uses in other areas beyond just crypto itself.

I expect a similar story to play out with zkTLS, starting with implementation in Web3 and then extending beyond that, because, as I said before, currently, we &quot;read&quot; and &quot;write,&quot; but we are hardly protected and hardly &quot;own&quot; even our own data.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>How can we make the use of web2 data in web3 actually private and verifiable?<br>
<br>
Many people who claim that web3 is the new internet define it with the phrase "read, write, own." The "read" and "write" parts are clear, but when it comes to "own" in terms of data, we hardly own anything today.<br>
<br>
User data is often stolen by corporations and used in ways that benefit them; we don’t truly own anything on the internet. <br>
<br>
However, we can't just shift to a world where only web3 exists without sharing anything. No, we still need to share, but only what's necessary.<br>
<br>
As someone with a weaker passport, I'm stuck applying for e-visas and submitting endless details about myself to prove I'm eligible for specific visas. And I always end up asking myself:<br>
<br>
• Why should I share my entire bank statement when they only need to confirm a specific income level?<br>
<br>
• Why should I provide the exact hotel reservation instead of just proving I've booked a hotel in this country?<br>
<br>
• Why do I have to submit my full passport details when all they need is to verify my permanent residence in my current country?<br>
<br>
There are two main concerns here: services know far more than they need to, and the data you're providing isn't private. But how does this relate to security and privacy in crypto?<br>
<br>
1. Web3 is not gonna make it without web2 data.<br>
<br>
As most of you know, smart contracts essentially have no idea how much BTC, ETH, SOL, or any other asset costs. This task is delegated to oracles, which constantly post public data from the outside world to the smart contract.<br>
<br>
In the Ethereum world, this role is almost monopolized by <a href="https://nitter.freedit.eu/chainlink" title="Chainlink">@chainlink</a> with their oracle networks to ensure we don't rely on a single node. So, we really do need web2 data for more use cases beyond just knowing the price of certain assets.<br>
<br>
However, this only applies to public data. What if I want to securely connect my bank account or Telegram account and share sensitive information that isn't publicly available but is private to me?<br>
<br>
The first thought is: how can we bring this data onto a blockchain with proof that the private data is secure?<br>
<br>
Unfortunately, it doesn’t work that way because servers don’t sign the responses they send, so you can’t reliably verify something like that in smart contracts.<br>
<br>
The protocol that secures communication over a computer network is called TLS: Transport Layer Security. Even if you haven't heard of it, you use it daily. For example, while reading this article, you'll see the "https://" in your browser's address bar.<br>
<br>
If you tried accessing the website with an "http://" connection (without the "s"), your browser would warn you that the connection isn't secure. The "s" in the link stands for TLS, which secures your connection, ensuring privacy and preventing anyone from stealing the data you're transmitting.<br>
<br>
2. The connection is already secure, can't we just transport and use it in the web3?<br>
<br>
As I mentioned before, we face a verifiability problem: servers don’t sign the responses they send, so we can't really verify the data.<br>
<br>
Even if a data source agrees to share its data, the standard TLS protocol can't prove its authenticity to others. Simply passing a response isn’t enough: clients can easily alter the data locally, sharing those responses fully exposes them, risking user privacy.<br>
<br>
One approach to the verifiability problem is an enhanced version of TLS called zkTLS.<br>
<br>
The working mechanism of zkTLS is similar to TLS but slightly different, here's how it works:<br>
<br>
• You visit a website through a secure TLS connection and send the required request.<br>
<br>
• zkTLS generates a zk proof that verifies the data while revealing only the specific details the user wants to prove, keeping everything else private.<br>
<br>
• The generated zk proof is then used by other apps to confirm and verify that the provided information is correct.<br>
<br>
When I say zkTLS, I'm referring to projects utilizing zkTLS, but there are different approaches to data verifiability using various solutions: <br>
<br>
1. TEE (Trusted Execution Environment)<br>
2. MPC (Multi-Party Computation)<br>
3. Proxy<br>
<br>
Interestingly, each approach introduces its own set of unique use cases. So, how do they differ?<br>
<br>
3. Why isn't there a single standard for zkTLS? How are they different?<br>
<br>
zkTLS isn't a single technology because verifying private web data without exposing it can be approached from multiple angles, each with its own trade-offs. The core idea is to extend TLS with proofs, but how you generate and validate those proofs depends on the underlying mechanism.<br>
<br>
As I mentioned before, three main approaches are using TEE-TLS, MPC-TLS, or Proxy-TLS.<br>
<br>
TEE relies on specialized hardware, like Intel SGX or AWS Nitro Enclaves, to create a secure "black box" where data can be processed and proofs generated. The hardware ensures the data stays private and computations are tamper-proof.<br>
<br>
In a TEE-based zkTLS setup, the TEE runs the protocol, proving the TLS session's execution and content. The verifier is the TEE itself, so trust depends on the TEE's manufacturer and its resistance to attacks. This approach is efficient with low computational and network overhead. <br>
<br>
However, it has a major flaw: you have to trust the hardware manufacturer, and vulnerabilities in TEEs (like side-channel attacks) can break the whole system.<br>
<br>
Proxy-TLS and MPC-TLS are the most widely adopted approaches due to their broader range of use cases. Projects like <a href="https://nitter.freedit.eu/OpacityNetwork" title="Opacity Network">@OpacityNetwork</a> and <a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a>, that are built on <a href="https://nitter.freedit.eu/eigenlayer" title="EigenLayer">@eigenlayer</a>, leverage these models to ensure data security and privacy along with an additional layer of economic security.<br>
<br>
Let's see how secure these solutions are, which use cases zkTLS protocols enable, and what's already live today.<br>
<br>
4. What's so special about MPC-TLS and Opacity Network?<br>
<br>
During the TLS Handshake (where a client and server agree on how to securely communicate by sharing encryption keys), the website's role remains unchanged, but the browser's process does something different.<br>
<br>
Instead of generating its own secret key, it uses a network of nodes to create a multiparty secret key via MPC. This key performs the handshake for the browser, ensuring that no single entity knows the shared key.<br>
<br>
Encryption and decryption require cooperation among all nodes and the browser, with each adding or removing their part of the encryption sequentially before data reaches or leaves the website. MPC-TLS provides strong security and can be distributed so no one group has all the power.<br>
<br>
Opacity Network enhances the classic <a href="https://nitter.freedit.eu/tlsnotary" title="TLSNotary">@tlsnotary</a> framework by adding safeguards to minimize trust issues. It employs multiple security measures like:<br>
<br>
1. On-chain verification of web2 account IDs<br>
2. Commit scheme<br>
3. Reveal scheme<br>
4. Random MPC-network sampling<br>
5. Verifiable log of attempts<br>
<br>
Account IDs, being static in web2 systems, allow for proof by committee where ten different nodes must confirm ownership. This links the account to a unique wallet, preventing repeated tries with different wallets to find a colluding node. <br>
<br>
You can see how Opacity works in detail down below:<br>
<br>
Opacity nodes operate within a TEE, making collusion almost impossible if the TEE is secure. Beyond TEEs, Opacity also uses Eigenlayer to leverage an AVS, requiring nodes to restake 32 stETH, with immediate slashing for misconduct, avoiding delays associated with cooldowns.<br>
<br>
You can see that Opacity uses both MPC and TEE, but because MPC is used for zkTLS while TEE is used basically for node security, it's still called MPC-TLS.<br>
<br>
However, if the TEEs were to fail, it could enable a node to engage in collusion within the MPC. That's one of the reasons why an additional economic security layer is needed to prevent this behavior.<br>
<br>
That's also why Opacity is developing a whistleblower mechanism where users who can prove that a notary has acted improperly will be rewarded with a share of the penalty imposed on the notary's stake.<br>
<br>
Due to its simplicity of integration, security, and the privacy it offers, Opacity has attracted various protocols to integrate it into their products across consumer, DeFi, and AI agent sectors.<br>
<br>
The team from <a href="https://nitter.freedit.eu/earnos_io" title="EarnOS">@earnos_io</a> is developing a platform where brands can reward users for engagement or task completion. EarnOS uses Opacity’s tech to prove traits via popular apps without revealing personal info, letting brands target audiences while users keep privacy and earn rewards.<br>
<br>
Opacity is also integrated into the <a href="https://nitter.freedit.eu/daylightenergy_" title="Daylight Energy 🔆">@daylightenergy_</a> protocol, developing a decentralized electric utility network where users can earn rewards for contributing to clean energy solutions. Thanks to Opacity, users can prove energy device ownership on-chain without specialized hardware.<br>
<br>
Opacity can even be integrated with AI agents, bringing more verifiability and transparency to a field that currently faces significant challenges. zkTLS was recently integrated into <a href="https://nitter.freedit.eu/elizaOS" title="elizaOS">@elizaOS</a>, allowing for verifiable AI interactions without privacy loss. <br>
<br>
However, TEE-TLS and MPC-TLS are only two variations of zkTLS, there's also a third one called Proxy-TLS, with the Reclaim Network being the most famous representation of this model. So, how is it different in terms of tech from the other two variations, and which use cases can be enabled by Proxy-TLS?<br>
<br>
5. What’s so special about Proxy-TLS and Reclaim Protocol?<br>
<br>
HTTPS proxies, common on the internet, forward encrypted traffic without accessing its content. In the zkTLS proxy model, it works almost the same with slight additions:<br>
<br>
• The browser sends requests to the website through a proxy, which also handles the website's responses.<br>
<br>
• The proxy sees all encrypted exchanges and attests to their authenticity, noting whether each is a request or response.<br>
<br>
• The browser then generates a zk proof which states that it can encrypt this data with a shared key without revealing the key and shows the result.<br>
<br>
• This works because it's nearly impossible to create a fake key that turns the data into anything sensible, so just showing you can decrypt it is enough.<br>
<br>
Revealing the key would compromise all prior messages, including sensitive data like usernames and passwords. Proxy-TLS is pretty fast, affordable, and handles large data volumes well, making it ideal for high-throughput settings. <br>
<br>
The majority of servers don't restrict access based on varying IP addresses, making this method pretty widely applicable.<br>
<br>
Reclaim Protocol uses Proxy-TLS for efficient data verification and employs proxies to bypass Web2 firewalls preventing large-scale proxy blocking. <br>
<br>
Here's how it works:<br>
<br>
The main problem here is collusion: if the user and attestor collude, they can sign basically anything and act maliciously. To mitigate this, Reclaim incorporates a subset of validators chosen to introduce randomness and block such exploits.<br>
<br>
Reclaim uses Eigen's AVS to decentralize the validation of the data. EigenLayer operators can act as attestors, but they will need to deploy their own AVS to specify the attestation logic for their service.<br>
<br>
Reclaim is a platform enabling unique use cases like importing ride-sharing data for transportation apps, bridging off-chain data for blockchain economics, verifying identities with national ID data, creating custom data solutions via developer tools, and more.<br>
<br>
The Reclaim ecosystem is home to 20+ projects, but I'd like to highlight 4 of them in the money markets, digital identity, consumer, and hiring sectors.<br>
<br>
<a href="https://nitter.freedit.eu/3janexyz" title="3Jane">@3janexyz</a> is the first credit-based money market on Base, offering secured credit lines to crypto users by assessing their creditworthiness and future cash flows, using both on-chain and off-chain financial data.<br>
<br>
3Jane uses Reclaim's proxy model to verify credit data from VantageScore, Cred, Coinbase, and Plaid, ensuring privacy of this data.<br>
<br>
Another use for credit scores with zkTLS is through <a href="https://nitter.freedit.eu/zkme_" title="zkMe">@zkme_</a>'s feature, zkCreditScore. It uses Reclaim Protocol to get your US credit score securely with zkTLS. This lets zkMe check a user's credit score and make unique soulbound tokens (SBTs) to store this data.<br>
<br>
Can there be any other use cases besides credit scores? Of course, there are. <br>
<br>
We can take <a href="https://nitter.freedit.eu/zkp2p" title="ZKP2P">@zkp2p</a> as an example, which is a consumer goods marketplace that leverages Reclaim for verifying users' Ticketmaster data as well as verifying user payments. <br>
<br>
At the same time, <a href="https://nitter.freedit.eu/bondexapp" title="Bondex">@bondexapp</a>, which is one of the most popular job boards in crypto, uses Reclaim for getting proof of work of profiles, verifying that the data is real, private, and verifiable.<br>
<br>
Looking at the use cases possible via zkTLS, the ability to verify TLS transcripts on-chain is already unlocking numerous new functionalities, allowing users to control their own data without needing permission from large corporations. <br>
<br>
More importantly, zkTLS is made to ensure that your personal data is not used against you. So, where is this headed?<br>
<br>
6. Is zkTLS here to stay?<br>
<br>
There is still work to be done, but different zkTLS protocols are already introducing new use cases that redistribute power back to the users. <br>
<br>
<a href="https://nitter.freedit.eu/Tim_Roughgarden" title="Tim Roughgarden">@Tim_Roughgarden</a> on the a16z crypto podcast highlighted that zk proofs, proposed in 1985, only gained popularity with blockchain applications, thanks to hundreds of developers working to reduce proof size and costs.<br>
<br>
And now, contributions from the blockchain industry are finding uses in other areas beyond just crypto itself.<br>
<br>
I expect a similar story to play out with zkTLS, starting with implementation in Web3 and then extending beyond that, because, as I said before, currently, we "read" and "write," but we are hardly protected and hardly "own" even our own data.</p>
<img src="https://nitter.freedit.eu/pic/media%2FGjgs6wAagAAWAZ1.jpg" style="max-width:250px;" />
<img src="https://nitter.freedit.eu/pic/media%2FGjguSa9aYAAhYP9.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Tue, 11 Feb 2025 14:17:37 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1889317871551180955#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1889317871551180955#m</link>
      </item>
      <item>
        <title>RT by @paramonoww: Great thread, owning the data is the key element now</title>
        <dc:creator>@Srijith_Padmesh</dc:creator>
        <description><![CDATA[<p>Great thread, owning the data is the key element now</p>
<p><a href="https://nitter.freedit.eu/paramonoww/status/1889317871551180955#m">nitter.freedit.eu/paramonoww/status/1889317871551180955#m</a></p>]]></description>
        <pubDate>Tue, 11 Feb 2025 15:43:06 GMT</pubDate>
        <guid>https://nitter.freedit.eu/Srijith_Padmesh/status/1889339386111693019#m</guid>
        <link>https://nitter.freedit.eu/Srijith_Padmesh/status/1889339386111693019#m</link>
      </item>
      <item>
        <title>RT by @paramonoww: Building the foundation for private, verifiable web2 data in crypto. @OpacityNetwork and @reclaimprotocol are showing what&apos;s possible with EigenLayer.</title>
        <dc:creator>@eigenlayer</dc:creator>
        <description><![CDATA[<p>Building the foundation for private, verifiable web2 data in crypto. <a href="https://nitter.freedit.eu/OpacityNetwork" title="Opacity Network">@OpacityNetwork</a> and <a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a> are showing what's possible with EigenLayer.</p>
<p><a href="https://nitter.freedit.eu/paramonoww/status/1889317871551180955#m">nitter.freedit.eu/paramonoww/status/1889317871551180955#m</a></p>]]></description>
        <pubDate>Tue, 11 Feb 2025 15:15:59 GMT</pubDate>
        <guid>https://nitter.freedit.eu/eigenlayer/status/1889332560804839555#m</guid>
        <link>https://nitter.freedit.eu/eigenlayer/status/1889332560804839555#m</link>
      </item>
      <item>
        <title>RT by @paramonoww: zkTLS is one of the most powerful and useful primitives we&apos;ve seen come out of crypto.

and proves crypto primitives are not only for onchain finance.

@earnos_io - proving app engagement for brand rewards while preserving privacy (@OpacityNetwork)
@daylightenergy_ - verifying energy device ownership without exposing personal data (@OpacityNetwork)
@OpenAI / other LLMs + @elizaOS - making AI interactions verifiable while maintaining privacy (@OpacityNetwork)
Earnifi - enabling arbitrary verification of bank account details with privacy (@reclaimprotocol)
@3janexyz - verifying credit data for DeFi lending (@reclaimprotocol)
@zkme_ - converting credit scores into private soulbound tokens (@reclaimprotocol)
@zkp2p - verifying @Ticketmaster data and payments for marketplace (@reclaimprotocol)
@bondexapp - verifying work history proofs for job applications (@reclaimprotocol)</title>
        <dc:creator>@dabit3</dc:creator>
        <description><![CDATA[<p>zkTLS is one of the most powerful and useful primitives we've seen come out of crypto.<br>
<br>
and proves crypto primitives are not only for onchain finance.<br>
<br>
<a href="https://nitter.freedit.eu/earnos_io" title="EarnOS">@earnos_io</a> - proving app engagement for brand rewards while preserving privacy (<a href="https://nitter.freedit.eu/OpacityNetwork" title="Opacity Network">@OpacityNetwork</a>)<br>
<a href="https://nitter.freedit.eu/daylightenergy_" title="Daylight Energy 🔆">@daylightenergy_</a> - verifying energy device ownership without exposing personal data (<a href="https://nitter.freedit.eu/OpacityNetwork" title="Opacity Network">@OpacityNetwork</a>)<br>
<a href="https://nitter.freedit.eu/OpenAI" title="OpenAI">@OpenAI</a> / other LLMs + <a href="https://nitter.freedit.eu/elizaOS" title="elizaOS">@elizaOS</a> - making AI interactions verifiable while maintaining privacy (<a href="https://nitter.freedit.eu/OpacityNetwork" title="Opacity Network">@OpacityNetwork</a>)<br>
Earnifi - enabling arbitrary verification of bank account details with privacy (<a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a>)<br>
<a href="https://nitter.freedit.eu/3janexyz" title="3Jane">@3janexyz</a> - verifying credit data for DeFi lending (<a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a>)<br>
<a href="https://nitter.freedit.eu/zkme_" title="zkMe">@zkme_</a> - converting credit scores into private soulbound tokens (<a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a>)<br>
<a href="https://nitter.freedit.eu/zkp2p" title="ZKP2P">@zkp2p</a> - verifying <a href="https://nitter.freedit.eu/Ticketmaster" title="Ticketmaster">@Ticketmaster</a> data and payments for marketplace (<a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a>)<br>
<a href="https://nitter.freedit.eu/bondexapp" title="Bondex">@bondexapp</a> - verifying work history proofs for job applications (<a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a>)</p>
<p><a href="https://nitter.freedit.eu/paramonoww/status/1889317871551180955#m">nitter.freedit.eu/paramonoww/status/1889317871551180955#m</a></p>]]></description>
        <pubDate>Tue, 11 Feb 2025 15:18:44 GMT</pubDate>
        <guid>https://nitter.freedit.eu/dabit3/status/1889333254261559694#m</guid>
        <link>https://nitter.freedit.eu/dabit3/status/1889333254261559694#m</link>
      </item>
      <item>
        <title>RT by @paramonoww: Own your web2 data: financial info, credit score, driver / house host ratings, identity, Amazon transaction history etc etc 
 
How @reclaimprotocol and @OpacityNetwork help you reclaim your data opaquely ( privately). 

Built on @eigenlayer!</title>
        <dc:creator>@sreeramkannan</dc:creator>
        <description><![CDATA[<p>Own your web2 data: financial info, credit score, driver / house host ratings, identity, Amazon transaction history etc etc <br>
 <br>
How <a href="https://nitter.freedit.eu/reclaimprotocol" title="Reclaim Protocol">@reclaimprotocol</a> and <a href="https://nitter.freedit.eu/OpacityNetwork" title="Opacity Network">@OpacityNetwork</a> help you reclaim your data opaquely ( privately). <br>
<br>
Built on <a href="https://nitter.freedit.eu/eigenlayer" title="EigenLayer">@eigenlayer</a>!</p>
<p><a href="https://nitter.freedit.eu/paramonoww/status/1889317871551180955#m">nitter.freedit.eu/paramonoww/status/1889317871551180955#m</a></p>]]></description>
        <pubDate>Tue, 11 Feb 2025 16:35:13 GMT</pubDate>
        <guid>https://nitter.freedit.eu/sreeramkannan/status/1889352502312927516#m</guid>
        <link>https://nitter.freedit.eu/sreeramkannan/status/1889352502312927516#m</link>
      </item>
      <item>
        <title>RT by @paramonoww: How Gigagas Rollups Work with @rise_chain as the main study. Feel free to read my guest article below.

That&apos;s an interesting approach to scaling, but, obviously, not every app will require such speed.

This is the final series on exploring different types of rollups.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>How Gigagas Rollups Work with <a href="https://nitter.freedit.eu/rise_chain" title="RISE Chain">@rise_chain</a> as the main study. Feel free to read my guest article below.<br>
<br>
That's an interesting approach to scaling, but, obviously, not every app will require such speed.<br>
<br>
This is the final series on exploring different types of rollups.</p>
<p><a href="https://nitter.freedit.eu/2077Research/status/1886892073615339927#m">nitter.freedit.eu/2077Research/status/1886892073615339927#m</a></p>
<img src="https://nitter.freedit.eu/pic/media%2FGjALCyXa4AAjB1D.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 05 Feb 2025 06:08:18 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1887020404642078745#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1887020404642078745#m</link>
      </item>
      <item>
        <title>How Native Rollups work, feel free to read my guest article down below.

Yes, this is one of the approaches to interop that can allow composability at the validator level.

However, we still need to solve interoperability for other rollups, which will 100% not be native.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>How Native Rollups work, feel free to read my guest article down below.<br>
<br>
Yes, this is one of the approaches to interop that can allow composability at the validator level.<br>
<br>
However, we still need to solve interoperability for other rollups, which will 100% not be native.</p>
<p><a href="https://nitter.freedit.eu/2077Research/status/1883980391301755100#m">nitter.freedit.eu/2077Research/status/1883980391301755100#m</a></p>
<img src="https://nitter.freedit.eu/pic/media%2FGiWk3kHaYAQ25Qc.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Tue, 28 Jan 2025 04:41:07 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1884099362370076831#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1884099362370076831#m</link>
      </item>
      <item>
        <title>I&apos;m hiring a researcher to work closely with me on both public and private research projects. 

This role is ideal for someone who is highly self-organized, possesses excellent communication skills, and has the ability to write interesting and insightful content.  

Hard Skills: 
• Researcher first, writer second.

• 3+ published tech and product articles that are insightful and engaging, not just restructured tech docs.

• Focus on infrastructure primarily for EVM and Solana.

• Brief knowledge of the top 50 protocols in the crypto space. 

• Experience with Data Analytics is a bonus.  

Soft Skills: 
• Self-organized with a keen attention to detail, understanding that details separate good research from great research. 

• Ability to manage multiple projects in a fast-paced environment. 

• Clear and transparent communicator, which is possibly one of the most critical aspects. 

• Capable of suggesting own ideas, especially when you feel like something is not right.

Opportunities: 
• Work with me and tier-1 protocols in the blockchain space.

• Learn about and implement a research and writing pipeline.

• Remote work, if you&apos;re based in Asian time zone, it&apos;s even better, but not critical.

• Contract or full-time position; I&apos;m open to suggestions on this, but note that work never ends: manage your time wisely.  

If you&apos;re interested, please send me a DM with a brief introduction, your writings, and your resume if you have one.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>I'm hiring a researcher to work closely with me on both public and private research projects. <br>
<br>
This role is ideal for someone who is highly self-organized, possesses excellent communication skills, and has the ability to write interesting and insightful content.  <br>
<br>
Hard Skills: <br>
• Researcher first, writer second.<br>
<br>
• 3+ published tech and product articles that are insightful and engaging, not just restructured tech docs.<br>
<br>
• Focus on infrastructure primarily for EVM and Solana.<br>
<br>
• Brief knowledge of the top 50 protocols in the crypto space. <br>
<br>
• Experience with Data Analytics is a bonus.  <br>
<br>
Soft Skills: <br>
• Self-organized with a keen attention to detail, understanding that details separate good research from great research. <br>
<br>
• Ability to manage multiple projects in a fast-paced environment. <br>
<br>
• Clear and transparent communicator, which is possibly one of the most critical aspects. <br>
<br>
• Capable of suggesting own ideas, especially when you feel like something is not right.<br>
<br>
Opportunities: <br>
• Work with me and tier-1 protocols in the blockchain space.<br>
<br>
• Learn about and implement a research and writing pipeline.<br>
<br>
• Remote work, if you're based in Asian time zone, it's even better, but not critical.<br>
<br>
• Contract or full-time position; I'm open to suggestions on this, but note that work never ends: manage your time wisely.  <br>
<br>
If you're interested, please send me a DM with a brief introduction, your writings, and your resume if you have one.</p>]]></description>
        <pubDate>Fri, 24 Jan 2025 07:59:14 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1882699667269669212#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1882699667269669212#m</link>
      </item>
      <item>
        <title>How Booster Rollups work primarily enables Ethereum&apos;s horizontal scaling</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>How Booster Rollups work primarily enables Ethereum's horizontal scaling</p>
<p><a href="https://nitter.freedit.eu/2077Research/status/1881786222961430840#m">nitter.freedit.eu/2077Research/status/1881786222961430840#m</a></p>
<img src="https://nitter.freedit.eu/pic/media%2FGh34ZS0bsAAlMbu.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 22 Jan 2025 05:16:18 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1881933887254962343#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1881933887254962343#m</link>
      </item>
      <item>
        <title>Hyperliquid is a pretty weird platform. I connected my wallet, bridged USDC from Arbitrum, bought HYPE on spot, and it was okay.

After two days, I went to the website, and it said my account was flagged as high risk, while on all other dapps, it was never recognized as such. 

I messaged them through email, but they didn&apos;t respond. I opened a ticket on Discord, and the guy sent me a template response. After my question, I got muted for 7 days?

I can&apos;t swap, deposit, transfer, or withdraw, so I can&apos;t do anything with the money I deposited.

The fix was using @Hypurrfun to swap HYPE for USDC and transfer from spot to perps, and then using @deBridgeFinance to bridge from Hyperliquid to L2.

Thanks to @KamBenbrik and @cp0xdotcom for helping with the issue.

I understand that even if my address was marked as high risk, why would you let me deposit on the platform but not allow me to withdraw? 

Okay, even if this happened, should I be muted for 7 days after simply asking how I can get my money back if I can&apos;t do it via your UI?</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>Hyperliquid is a pretty weird platform. I connected my wallet, bridged USDC from Arbitrum, bought HYPE on spot, and it was okay.<br>
<br>
After two days, I went to the website, and it said my account was flagged as high risk, while on all other dapps, it was never recognized as such. <br>
<br>
I messaged them through email, but they didn't respond. I opened a ticket on Discord, and the guy sent me a template response. After my question, I got muted for 7 days?<br>
<br>
I can't swap, deposit, transfer, or withdraw, so I can't do anything with the money I deposited.<br>
<br>
The fix was using <a href="https://nitter.freedit.eu/Hypurrfun" title="Hfun">@Hypurrfun</a> to swap HYPE for USDC and transfer from spot to perps, and then using <a href="https://nitter.freedit.eu/deBridgeFinance" title="deBridge">@deBridgeFinance</a> to bridge from Hyperliquid to L2.<br>
<br>
Thanks to <a href="https://nitter.freedit.eu/KamBenbrik" title="Kam 🌑">@KamBenbrik</a> and <a href="https://nitter.freedit.eu/cp0xdotcom" title="cp0x.com">@cp0xdotcom</a> for helping with the issue.<br>
<br>
I understand that even if my address was marked as high risk, why would you let me deposit on the platform but not allow me to withdraw? <br>
<br>
Okay, even if this happened, should I be muted for 7 days after simply asking how I can get my money back if I can't do it via your UI?</p>
<img src="https://nitter.freedit.eu/pic/media%2FGhz_BsOaoAAIx9C.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Tue, 21 Jan 2025 11:20:58 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1881663274837803418#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1881663274837803418#m</link>
      </item>
      <item>
        <title>I was glad to research the based rollups functionality of @Spire_Labs and @taikoxyz and write a small article about it for the 2077 team.

If you&apos;ve always wondered about based rollups, that piece would be helpful. The next parts will include booster rollups and native rollups.</title>
        <dc:creator>@paramonoww</dc:creator>
        <description><![CDATA[<p>I was glad to research the based rollups functionality of <a href="https://nitter.freedit.eu/Spire_Labs" title="Spire🗼">@Spire_Labs</a> and <a href="https://nitter.freedit.eu/taikoxyz" title="Taiko.eth 🥁">@taikoxyz</a> and write a small article about it for the 2077 team.<br>
<br>
If you've always wondered about based rollups, that piece would be helpful. The next parts will include booster rollups and native rollups.</p>
<p><a href="https://nitter.freedit.eu/2077Research/status/1879976056750502327#m">nitter.freedit.eu/2077Research/status/1879976056750502327#m</a></p>
<img src="https://nitter.freedit.eu/pic/media%2FGheWke5acAAYCaa.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Fri, 17 Jan 2025 06:23:09 GMT</pubDate>
        <guid>https://nitter.freedit.eu/paramonoww/status/1880138774413471916#m</guid>
        <link>https://nitter.freedit.eu/paramonoww/status/1880138774413471916#m</link>
      </item>

  </channel>
</rss>
