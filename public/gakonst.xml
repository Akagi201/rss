<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="https://nitter.freedit.eu/gakonst/rss" rel="self" type="application/rss+xml" />
    <title>Georgios Konstantopoulos / @gakonst</title>
    <link>https://nitter.freedit.eu/gakonst</link>
    <description>Twitter feed for: @gakonst. Generated by nitter.freedit.eu
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    <image>
      <title>Georgios Konstantopoulos / @gakonst</title>
      <link>https://nitter.freedit.eu/gakonst</link>
      <url>https://nitter.freedit.eu/pic/pbs.twimg.com%2Fprofile_images%2F1596214564470734849%2F1Tg5-gNh_400x400.jpg</url>
      <width>128</width>
      <height>128</height>
    </image>
      <item>
        <title>R to @gakonst: I understand a malicious app could just upgrade your account to anything. You can work with the apps to register the delegation contracts they want. Alternatively let the app suggest an address the first time the user wants to upgrade, assuming the app is honest the first time. Seems fine as an assumption.</title>
        <dc:creator>@gakonst</dc:creator>
        <description><![CDATA[<p>I understand a malicious app could just upgrade your account to anything. You can work with the apps to register the delegation contracts they want. Alternatively let the app suggest an address the first time the user wants to upgrade, assuming the app is honest the first time. Seems fine as an assumption.</p>]]></description>
        <pubDate>Thu, 16 Jan 2025 20:34:11 GMT</pubDate>
        <guid>https://nitter.freedit.eu/gakonst/status/1879990554425241968#m</guid>
        <link>https://nitter.freedit.eu/gakonst/status/1879990554425241968#m</link>
      </item>
      <item>
        <title>R to @gakonst: The default path rn is wallets pick a single delegation contract they like for their users, in the name of security. 

Can they encapsulate the functionality apps need? Why not empower the apps?</title>
        <dc:creator>@gakonst</dc:creator>
        <description><![CDATA[<p>The default path rn is wallets pick a single delegation contract they like for their users, in the name of security. <br>
<br>
Can they encapsulate the functionality apps need? Why not empower the apps?</p>]]></description>
        <pubDate>Thu, 16 Jan 2025 20:34:11 GMT</pubDate>
        <guid>https://nitter.freedit.eu/gakonst/status/1879990552885944403#m</guid>
        <link>https://nitter.freedit.eu/gakonst/status/1879990552885944403#m</link>
      </item>
      <item>
        <title>My most unpopular opinion is that Metamask and other wallets should allow apps to choose their own EIP7702 delegation contract.

Empower the apps to give the best UX to their users. Chrome Extensions shouldn&apos;t be the intermediary to users&apos; accounts.</title>
        <dc:creator>@gakonst</dc:creator>
        <description><![CDATA[<p>My most unpopular opinion is that Metamask and other wallets should allow apps to choose their own EIP7702 delegation contract.<br>
<br>
Empower the apps to give the best UX to their users. Chrome Extensions shouldn't be the intermediary to users' accounts.</p>]]></description>
        <pubDate>Thu, 16 Jan 2025 20:25:18 GMT</pubDate>
        <guid>https://nitter.freedit.eu/gakonst/status/1879988318227820631#m</guid>
        <link>https://nitter.freedit.eu/gakonst/status/1879988318227820631#m</link>
      </item>
      <item>
        <title>RT by @gakonst: it&apos;s really fucked up that contributor charts are adjusted by the top contributor, you can&apos;t compete with this man</title>
        <dc:creator>@ashekhirin</dc:creator>
        <description><![CDATA[<p>it's really fucked up that contributor charts are adjusted by the top contributor, you can't compete with this man</p>
<img src="https://nitter.freedit.eu/pic/media%2FGhb8hmOWMAAGzOn.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Thu, 16 Jan 2025 19:03:02 GMT</pubDate>
        <guid>https://nitter.freedit.eu/ashekhirin/status/1879967614916858007#m</guid>
        <link>https://nitter.freedit.eu/ashekhirin/status/1879967614916858007#m</link>
      </item>
      <item>
        <title>RT by @gakonst: Excited to announce our partnership with @RISCZero to integrate Binius, bringing ultra-fast performance to the original RISC-V zkVM.

Together, we&apos;re setting new standards for ZK performance and accessibility.

https://www.irreducible.com/posts/irreducible-x-risc-zero</title>
        <dc:creator>@IrreducibleHW</dc:creator>
        <description><![CDATA[<p>Excited to announce our partnership with <a href="https://nitter.freedit.eu/RiscZero" title="RISC Zero üü°">@RISCZero</a> to integrate Binius, bringing ultra-fast performance to the original RISC-V zkVM.<br>
<br>
Together, we're setting new standards for ZK performance and accessibility.<br>
<br>
<a href="https://www.irreducible.com/posts/irreducible-x-risc-zero">irreducible.com/posts/irredu‚Ä¶</a></p>
<img src="https://nitter.freedit.eu/pic/card_img%2F1879892047491907584%2FmCXm9GXH%3Fformat%3Dpng%26name%3D800x419" style="max-width:250px;" />]]></description>
        <pubDate>Thu, 16 Jan 2025 14:06:10 GMT</pubDate>
        <guid>https://nitter.freedit.eu/IrreducibleHW/status/1879892909388144906#m</guid>
        <link>https://nitter.freedit.eu/IrreducibleHW/status/1879892909388144906#m</link>
      </item>
      <item>
        <title>RT by @gakonst: Reth ExEx project idea: index all state changes (accounts, storages), hash addresses and storage slots, write them to an SQLite database (for simplicity)

@ithacaxyz will host it on one of our production machines and expose a simple API for querying</title>
        <dc:creator>@ashekhirin</dc:creator>
        <description><![CDATA[<p>Reth ExEx project idea: index all state changes (accounts, storages), hash addresses and storage slots, write them to an SQLite database (for simplicity)<br>
<br>
<a href="https://nitter.freedit.eu/ithacaxyz" title="Ithaca">@ithacaxyz</a> will host it on one of our production machines and expose a simple API for querying</p>
<p><a href="https://nitter.freedit.eu/ashekhirin/status/1879590142455013538#m">nitter.freedit.eu/ashekhirin/status/1879590142455013538#m</a></p>]]></description>
        <pubDate>Thu, 16 Jan 2025 19:21:31 GMT</pubDate>
        <guid>https://nitter.freedit.eu/ashekhirin/status/1879972268241219902#m</guid>
        <link>https://nitter.freedit.eu/ashekhirin/status/1879972268241219902#m</link>
      </item>
      <item>
        <title>RT by @gakonst: Reminder: if you recently updated Foundry and your build starts breaking with stack too deep set `optimizer = true` in your foundry.toml

We‚Äôve recently stopped enabling the optimizer by default and now require you to enable it explicitly

https://github.com/foundry-rs/foundry/issues/2486</title>
        <dc:creator>@zerosnacks</dc:creator>
        <description><![CDATA[<p>Reminder: if you recently updated Foundry and your build starts breaking with stack too deep set `optimizer = true` in your foundry.toml<br>
<br>
We‚Äôve recently stopped enabling the optimizer by default and now require you to enable it explicitly<br>
<br>
<a href="https://github.com/foundry-rs/foundry/issues/2486">github.com/foundry-rs/foundr‚Ä¶</a></p>
<img src="https://nitter.freedit.eu/pic/card_img%2F1878346224199176192%2FxmUa_nBn%3Fformat%3Djpg%26name%3D800x419" style="max-width:250px;" />]]></description>
        <pubDate>Sun, 12 Jan 2025 07:42:08 GMT</pubDate>
        <guid>https://nitter.freedit.eu/zerosnacks/status/1878346710079971675#m</guid>
        <link>https://nitter.freedit.eu/zerosnacks/status/1878346710079971675#m</link>
      </item>
      <item>
        <title>RT by @gakonst: most browser extension wallets handle your PK - better trust the wallet.
setting up your hw wallet - better trust the wallet.
making sure SCA wallets have a secure contract implementation - better trust the wallet.
etc etc etc.

why can‚Äôt we trust it with not persisting a private key?</title>
        <dc:creator>@_jxom</dc:creator>
        <description><![CDATA[<p>most browser extension wallets handle your PK - better trust the wallet.<br>
setting up your hw wallet - better trust the wallet.<br>
making sure SCA wallets have a secure contract implementation - better trust the wallet.<br>
etc etc etc.<br>
<br>
why can‚Äôt we trust it with not persisting a private key?</p>]]></description>
        <pubDate>Wed, 15 Jan 2025 20:23:13 GMT</pubDate>
        <guid>https://nitter.freedit.eu/_jxom/status/1879625406724321467#m</guid>
        <link>https://nitter.freedit.eu/_jxom/status/1879625406724321467#m</link>
      </item>
      <item>
        <title>RT by @gakonst: - On 1 &amp; 2: valid concern if user wants multisig/strict execution guards - but this could be solved by deactivating the private key (EIP-7851)
- On 2: usually the wallet would perform the delegation, so I would trust the wallet to ‚Äúthrow away‚Äù the private key (if that‚Äôs the intention) if we are trusting them with everything else
- On 3: I‚Äôm not quite following the advantage of create2 addresses for EOAs since you can already determine a users address before delegation (just not via create2)
- On 4: probably won‚Äôt be possible for apps to delegate since no wallets expose eth_sign nor is there any RPC method to 7702 sign (highly doubt there will be too as it‚Äôs analogous to programmatically exporting your PK). Generally wallets will orchestrate the delegation behind the scenes, and pretty much all wallets have very good security practices (inc. audited account contracts). If we are already trusting wallets with our private key, then I‚Äôm sure we can trust them with upgrading our accounts appropriately.

Seems that most of the concern here is the risk of persisting the private key, and it would be great to push on EIP-7851 to mitigate this.</title>
        <dc:creator>@_jxom</dc:creator>
        <description><![CDATA[<p>- On 1 & 2: valid concern if user wants multisig/strict execution guards - but this could be solved by deactivating the private key (EIP-7851)<br>
- On 2: usually the wallet would perform the delegation, so I would trust the wallet to ‚Äúthrow away‚Äù the private key (if that‚Äôs the intention) if we are trusting them with everything else<br>
- On 3: I‚Äôm not quite following the advantage of create2 addresses for EOAs since you can already determine a users address before delegation (just not via create2)<br>
- On 4: probably won‚Äôt be possible for apps to delegate since no wallets expose eth_sign nor is there any RPC method to 7702 sign (highly doubt there will be too as it‚Äôs analogous to programmatically exporting your PK). Generally wallets will orchestrate the delegation behind the scenes, and pretty much all wallets have very good security practices (inc. audited account contracts). If we are already trusting wallets with our private key, then I‚Äôm sure we can trust them with upgrading our accounts appropriately.<br>
<br>
Seems that most of the concern here is the risk of persisting the private key, and it would be great to push on EIP-7851 to mitigate this.</p>]]></description>
        <pubDate>Wed, 15 Jan 2025 09:04:36 GMT</pubDate>
        <guid>https://nitter.freedit.eu/_jxom/status/1879454626086609032#m</guid>
        <link>https://nitter.freedit.eu/_jxom/status/1879454626086609032#m</link>
      </item>
      <item>
        <title>RT by @gakonst: ü§ñ New EIP: XXXX

By: 
- Charlie Noyes
 -Dan Robinson
 -Justin Drake
 -Toni Wahrst√§tter

üîó https://github.com/ethereum/EIPs/pull/9241

This EIP proposes delaying the ExecutionPayload&apos;s state root reference by one block, so that for each block `n`, the `state_root` in block `n`&apos;s `ExecutionPayload` references the post-state of block `n-1`. This change aims to remove the expensive state root computation from the block-propagation critical path, reducing end-to-end latency for block production and potentially increasing throughput. It simplifies the block production pipeline, accelerates real-time ZK proving, and is a consensus-breaking change requiring a coordinated hard fork.</title>
        <dc:creator>@ethresearchbot</dc:creator>
        <description><![CDATA[<p>ü§ñ New EIP: XXXX<br>
<br>
By: <br>
- Charlie Noyes<br>
 -Dan Robinson<br>
 -Justin Drake<br>
 -Toni Wahrst√§tter<br>
<br>
üîó <a href="https://github.com/ethereum/EIPs/pull/9241">github.com/ethereum/EIPs/pul‚Ä¶</a><br>
<br>
This EIP proposes delaying the ExecutionPayload's state root reference by one block, so that for each block `n`, the `state_root` in block `n`'s `ExecutionPayload` references the post-state of block `n-1`. This change aims to remove the expensive state root computation from the block-propagation critical path, reducing end-to-end latency for block production and potentially increasing throughput. It simplifies the block production pipeline, accelerates real-time ZK proving, and is a consensus-breaking change requiring a coordinated hard fork.</p>
<img src="https://nitter.freedit.eu/pic/card_img%2F1879330372225204224%2Fd892LX-X%3Fformat%3Djpg%26name%3D800x419" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 15 Jan 2025 00:51:54 GMT</pubDate>
        <guid>https://nitter.freedit.eu/ethresearchbot/status/1879330635745292579#m</guid>
        <link>https://nitter.freedit.eu/ethresearchbot/status/1879330635745292579#m</link>
      </item>
      <item>
        <title>this is also what we used to call WoW players that were bad</title>
        <dc:creator>@gakonst</dc:creator>
        <description><![CDATA[<p>this is also what we used to call WoW players that were bad</p>
<p><a href="https://nitter.freedit.eu/tolly_xyz/status/1879001196616355862#m">nitter.freedit.eu/tolly_xyz/status/1879001196616355862#m</a></p>]]></description>
        <pubDate>Wed, 15 Jan 2025 03:42:01 GMT</pubDate>
        <guid>https://nitter.freedit.eu/gakonst/status/1879373447815741472#m</guid>
        <link>https://nitter.freedit.eu/gakonst/status/1879373447815741472#m</link>
      </item>
      <item>
        <title>RT by @gakonst: as part of this change, I‚Äôll no longer be the team lead at ARG; @kevaundray is the new team lead, bringing his deep expertise to help ethereum grow.

watch for the spectacular work coming from this group in 2025 ‚Äî it‚Äôs going to be a big year as we scale the world computer.</title>
        <dc:creator>@ralexstokes</dc:creator>
        <description><![CDATA[<p>as part of this change, I‚Äôll no longer be the team lead at ARG; <a href="https://nitter.freedit.eu/kevaundray" title="Kev">@kevaundray</a> is the new team lead, bringing his deep expertise to help ethereum grow.<br>
<br>
watch for the spectacular work coming from this group in 2025 ‚Äî it‚Äôs going to be a big year as we scale the world computer.</p>]]></description>
        <pubDate>Tue, 14 Jan 2025 17:12:15 GMT</pubDate>
        <guid>https://nitter.freedit.eu/ralexstokes/status/1879214961207148953#m</guid>
        <link>https://nitter.freedit.eu/ralexstokes/status/1879214961207148953#m</link>
      </item>
      <item>
        <title>RT by @gakonst: I‚Äôll be stepping up as a co-lead with @barnabemonnot  for research at the @ethereumfndn. Researchers at the EF are some of the most inspiring and passionate colleagues I‚Äôve found in life and I could not be more excited to support our work both inside and outside the EF.</title>
        <dc:creator>@ralexstokes</dc:creator>
        <description><![CDATA[<p>I‚Äôll be stepping up as a co-lead with <a href="https://nitter.freedit.eu/barnabemonnot" title="barnabe.eth">@barnabemonnot</a>  for research at the <a href="https://nitter.freedit.eu/ethereumfndn" title="Ethereum Foundation">@ethereumfndn</a>. Researchers at the EF are some of the most inspiring and passionate colleagues I‚Äôve found in life and I could not be more excited to support our work both inside and outside the EF.</p>]]></description>
        <pubDate>Tue, 14 Jan 2025 17:12:14 GMT</pubDate>
        <guid>https://nitter.freedit.eu/ralexstokes/status/1879214957268742266#m</guid>
        <link>https://nitter.freedit.eu/ralexstokes/status/1879214957268742266#m</link>
      </item>
      <item>
        <title>RT by @gakonst: hello world computer</title>
        <dc:creator>@ethereum</dc:creator>
        <description><![CDATA[<p>hello world computer</p>]]></description>
        <pubDate>Mon, 13 Jan 2025 13:07:35 GMT</pubDate>
        <guid>https://nitter.freedit.eu/ethereum/status/1878791000732393665#m</guid>
        <link>https://nitter.freedit.eu/ethereum/status/1878791000732393665#m</link>
      </item>
      <item>
        <title>RT by @gakonst: just found out that foundry stack trace now contains storage changes üëÄü§©

Very cool! Keep on shipping üöÄ</title>
        <dc:creator>@merkleplant_eth</dc:creator>
        <description><![CDATA[<p>just found out that foundry stack trace now contains storage changes üëÄü§©<br>
<br>
Very cool! Keep on shipping üöÄ</p>
<img src="https://nitter.freedit.eu/pic/media%2FGhLM2G7X0AAipMw.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Mon, 13 Jan 2025 13:00:48 GMT</pubDate>
        <guid>https://nitter.freedit.eu/merkleplant_eth/status/1878789293856235883#m</guid>
        <link>https://nitter.freedit.eu/merkleplant_eth/status/1878789293856235883#m</link>
      </item>
      <item>
        <title>RT by @gakonst: After the latest Reth bump, we could 3~4x the throughput limit on 2 test loads without breaking the chain!

Best bump ever and cannot thank the Reth contributors enough (especially in the last month). 

Reth is getting more and more stable for high loads ü´°.</title>
        <dc:creator>@hai_rise</dc:creator>
        <description><![CDATA[<p>After the latest Reth bump, we could 3~4x the throughput limit on 2 test loads without breaking the chain!<br>
<br>
Best bump ever and cannot thank the Reth contributors enough (especially in the last month). <br>
<br>
Reth is getting more and more stable for high loads ü´°.</p>]]></description>
        <pubDate>Mon, 13 Jan 2025 12:45:57 GMT</pubDate>
        <guid>https://nitter.freedit.eu/hai_rise/status/1878785558220345556#m</guid>
        <link>https://nitter.freedit.eu/hai_rise/status/1878785558220345556#m</link>
      </item>
      <item>
        <title>RT by @gakonst: Crypto conferences should be hackathons instead of speaker conventions, there are too many talks for the volume of work bearing fruit. Prizes should NOT be monetary

I&apos;m impressed looking back at university hackathon footage, seeing what passionate, curious people built with 0 xp</title>
        <dc:creator>@Rjected</dc:creator>
        <description><![CDATA[<p>Crypto conferences should be hackathons instead of speaker conventions, there are too many talks for the volume of work bearing fruit. Prizes should NOT be monetary<br>
<br>
I'm impressed looking back at university hackathon footage, seeing what passionate, curious people built with 0 xp</p>]]></description>
        <pubDate>Sun, 12 Jan 2025 22:36:34 GMT</pubDate>
        <guid>https://nitter.freedit.eu/Rjected/status/1878571800478593104#m</guid>
        <link>https://nitter.freedit.eu/Rjected/status/1878571800478593104#m</link>
      </item>
      <item>
        <title>Cross posting my 7702 answers from Warpcast to here because Tony from the Farcaster team asks good questions!

- not necessarily, you can forget the key and just replay the auth sig across chains, delegate to proxy and use the contract to handle upgrades. alternatively can store the privkey in cloud etc encrypted w enclave, nbd imho.
- unclear it matters, the ui will give you a preview over x-origin iframe, and your contract will have enough safety checks to ensure you don&apos;t get rugged. check secure payment confirmation web api if you really care about doing it non blind. 
- granted but not deal breaker, your contract can have multiple signers, need to be thoughtful about it but navigable, plus passkeys being pushed top down.
- session keys app/account interface is important to get right, see our work in porto for more: https://www.ithaca.xyz/updates/porto, and our WIP session key api which is still evolving: https://github.com/ithacaxyz/porto/tree/next?tab=readme-ov-file#keys
- zkemail is fantastic imo and totally underutilized. next up figuring out how to get google&apos;s certs reliably on chain as a public good, so we can do jwt verification for oauth.
- timelock or otherwise optional. can easily make your account say &quot;if an operation tries to transfer more than X value of such asset, request more auth keys (mfa) and also queue it up for 1mo in the future to ensure user can abort op if hacked from master key&quot;

we have put multiple examples on how to use 7702 and have deployed it on Odyssey, our devnet with Pectra + EOF, see below: 

https://github.com/ithacaxyz/odyssey-examples

There&apos;s also many examples / demos across Twitter if you search &quot;7702&quot;, see eg this one using &quot;anvil --odyssey&quot; which enables the same features Odyssey has but on Anvil (soon Anvil will be running same code as Reth via Reth SDK!)

https://x.com/thegaram33/status/1877410275814445170

There&apos;s more going on but this should be a good start for people! 

I cannot wait to show the world what full force crypto is, the stack is finally here and we&apos;re gonna lead the charge with our years of experience building the best open source tools.

https://warpcast.com/deodad/0x5fca3a10</title>
        <dc:creator>@gakonst</dc:creator>
        <description><![CDATA[<p>Cross posting my 7702 answers from Warpcast to here because Tony from the Farcaster team asks good questions!<br>
<br>
- not necessarily, you can forget the key and just replay the auth sig across chains, delegate to proxy and use the contract to handle upgrades. alternatively can store the privkey in cloud etc encrypted w enclave, nbd imho.<br>
- unclear it matters, the ui will give you a preview over x-origin iframe, and your contract will have enough safety checks to ensure you don't get rugged. check secure payment confirmation web api if you really care about doing it non blind. <br>
- granted but not deal breaker, your contract can have multiple signers, need to be thoughtful about it but navigable, plus passkeys being pushed top down.<br>
- session keys app/account interface is important to get right, see our work in porto for more: <a href="https://www.ithaca.xyz/updates/porto">ithaca.xyz/updates/porto</a>, and our WIP session key api which is still evolving: <a href="https://github.com/ithacaxyz/porto/tree/next?tab=readme-ov-file#keys">github.com/ithacaxyz/porto/t‚Ä¶</a><br>
- zkemail is fantastic imo and totally underutilized. next up figuring out how to get google's certs reliably on chain as a public good, so we can do jwt verification for oauth.<br>
- timelock or otherwise optional. can easily make your account say "if an operation tries to transfer more than X value of such asset, request more auth keys (mfa) and also queue it up for 1mo in the future to ensure user can abort op if hacked from master key"<br>
<br>
we have put multiple examples on how to use 7702 and have deployed it on Odyssey, our devnet with Pectra + EOF, see below: <br>
<br>
<a href="https://github.com/ithacaxyz/odyssey-examples">github.com/ithacaxyz/odyssey‚Ä¶</a><br>
<br>
There's also many examples / demos across Twitter if you search "7702", see eg this one using "anvil --odyssey" which enables the same features Odyssey has but on Anvil (soon Anvil will be running same code as Reth via Reth SDK!)<br>
<br>
<a href="https://x.com/thegaram33/status/1877410275814445170">x.com/thegaram33/status/1877‚Ä¶</a><br>
<br>
There's more going on but this should be a good start for people! <br>
<br>
I cannot wait to show the world what full force crypto is, the stack is finally here and we're gonna lead the charge with our years of experience building the best open source tools.<br>
<br>
<a href="https://warpcast.com/deodad/0x5fca3a10">warpcast.com/deodad/0x5fca3a‚Ä¶</a></p>
<img src="https://nitter.freedit.eu/pic/media%2FGhHc3KyaQAAPwT1.png" style="max-width:250px;" />
<img src="https://nitter.freedit.eu/pic/media%2FGhHaUE2a8AA4lX0.png" style="max-width:250px;" />]]></description>
        <pubDate>Sun, 12 Jan 2025 19:32:34 GMT</pubDate>
        <guid>https://nitter.freedit.eu/gakonst/status/1878525495563968624#m</guid>
        <link>https://nitter.freedit.eu/gakonst/status/1878525495563968624#m</link>
      </item>
      <item>
        <title>RT by @gakonst: Yup, 7702 is necessary for withdraw/pull flows which cannot be implemented into solving flows without risk (user would have to trust solver infra). It also enables solving intents for contracts that don&apos;t have a &apos;address onBehalfOf&apos;-like parameter in their functions.</title>
        <dc:creator>@0xZodomo</dc:creator>
        <description><![CDATA[<p>Yup, 7702 is necessary for withdraw/pull flows which cannot be implemented into solving flows without risk (user would have to trust solver infra). It also enables solving intents for contracts that don't have a 'address onBehalfOf'-like parameter in their functions.</p>]]></description>
        <pubDate>Sat, 11 Jan 2025 19:14:48 GMT</pubDate>
        <guid>https://nitter.freedit.eu/0xZodomo/status/1878158637056639018#m</guid>
        <link>https://nitter.freedit.eu/0xZodomo/status/1878158637056639018#m</link>
      </item>

  </channel>
</rss>
